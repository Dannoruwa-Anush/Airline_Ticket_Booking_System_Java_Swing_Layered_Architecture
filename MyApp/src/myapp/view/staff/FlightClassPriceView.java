/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myapp.view.staff;

import java.awt.Cursor;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import myapp.controller.BookingClassController;
import myapp.controller.FlightClassPriceController;
import myapp.controller.FlightController;
import myapp.dto.bookingClass.BookingClassResponseDTO;
import myapp.dto.flight.FlightResponseDTO;
import myapp.dto.flightClassPrice.FlightClassPriceRequestDTO;
import myapp.dto.flightClassPrice.FlightClassPriceResponseDTO;
import myapp.util.audit.AuditUtil;
import myapp.util.commonTask.CommonTask;
import myapp.util.commonUI.CommonMessageBoxUI;
import myapp.util.commonUI.PaginatedTableUI;
import myapp.util.formValidation.FormValidationUtil;
import myapp.view.LoginView;

/**
 *
 * @author HP
 */
public class FlightClassPriceView extends javax.swing.JFrame {

    /**
     * Creates new form FlightClassPriceView
     */
    private final FlightClassPriceController flightClassPriceController;
    private final String userName;
    private PaginatedTableUI<FlightClassPriceResponseDTO> paginatedUI;

    private final FlightController flightController;
    private final BookingClassController bookingClassController;
    private Map<String, FlightResponseDTO> flightWithoutFlightClassPriceInfoMap; // Map to store flight_name -> FlightResponseDTO (combox in input table section) 
    private int selectedFlight_Id;
    private int selectedFlightTotalSeatingCapacity;

    public FlightClassPriceView(String userName) {
        initComponents();
        this.userName = userName;

        flightClassPriceController = new FlightClassPriceController();
        flightController = new FlightController();
        bookingClassController = new BookingClassController();

        flightWithoutFlightClassPriceInfoMap = new HashMap<>();

        clearForm();
        initializeUIState();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_tblPagList_prev = new javax.swing.JButton();
        btn_tblPagList_next = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();
        lbl_logout = new javax.swing.JLabel();
        lbl_loggedUser = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        lblId4 = new javax.swing.JLabel();
        comBox_flight = new javax.swing.JComboBox<>();
        btn_delete = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_add = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_flightClassPricesList = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        lbl_copyright = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_editableClassPriceAddingList = new javax.swing.JTable();
        lbl_seatcapacity = new javax.swing.JLabel();
        btn_reset = new javax.swing.JButton();
        txt_searchBar = new javax.swing.JTextField();
        btn_tblPagList_prev1 = new javax.swing.JButton();
        btn_tblPagList_next1 = new javax.swing.JButton();
        lbl_routeInfo = new javax.swing.JLabel();
        lbl_departure = new javax.swing.JLabel();
        lbl_arrival = new javax.swing.JLabel();

        btn_tblPagList_prev.setText("<");
        btn_tblPagList_prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_prevActionPerformed(evt);
            }
        });

        btn_tblPagList_next.setText(">");
        btn_tblPagList_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_nextActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btn_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myapp/resource/img/back-arrow.jpg"))); // NOI18N
        btn_back.setBorder(null);
        btn_back.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_back.setMaximumSize(new java.awt.Dimension(39, 16));
        btn_back.setMinimumSize(new java.awt.Dimension(39, 16));
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        lblTitle1.setBackground(new java.awt.Color(204, 204, 204));
        lblTitle1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("Flight - Class - Pricing");

        lbl_logout.setForeground(new java.awt.Color(0, 51, 255));
        lbl_logout.setText("(logout)");
        lbl_logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_logoutMouseClicked(evt);
            }
        });

        lbl_loggedUser.setForeground(new java.awt.Color(0, 51, 255));
        lbl_loggedUser.setText("(username)");

        lblId4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId4.setText("Flight :");

        comBox_flight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comBox_flight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comBox_flightActionPerformed(evt);
            }
        });

        btn_delete.setLabel("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_update.setLabel("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_add.setLabel("Add");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        tbl_flightClassPricesList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_flightClassPricesList.setFillsViewportHeight(true);
        tbl_flightClassPricesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_flightClassPricesListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_flightClassPricesList);

        jLabel2.setText("Airline Ticket Booking System");

        lbl_copyright.setText("@C");

        tbl_editableClassPriceAddingList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_editableClassPriceAddingList.setFillsViewportHeight(true);
        jScrollPane2.setViewportView(tbl_editableClassPriceAddingList);

        lbl_seatcapacity.setText("Seat Capacity");
        lbl_seatcapacity.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 51, 102)));

        btn_reset.setText("Reset");
        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });

        txt_searchBar.setText("Search here...");
        txt_searchBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_searchBarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_searchBarFocusLost(evt);
            }
        });
        txt_searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_searchBarKeyTyped(evt);
            }
        });

        btn_tblPagList_prev1.setText("<");
        btn_tblPagList_prev1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_prev1ActionPerformed(evt);
            }
        });

        btn_tblPagList_next1.setText(">");
        btn_tblPagList_next1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_next1ActionPerformed(evt);
            }
        });

        lbl_routeInfo.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lbl_routeInfo.setText("Route :");

        lbl_departure.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lbl_departure.setText("Departure :");

        lbl_arrival.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lbl_arrival.setText("Arrival :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblId4)
                                .addGap(93, 93, 93)
                                .addComponent(comBox_flight, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btn_add)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_reset)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_update)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_delete))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_seatcapacity)
                                    .addComponent(lbl_routeInfo)
                                    .addComponent(lbl_departure)
                                    .addComponent(lbl_arrival))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(lbl_logout)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_loggedUser)))
                .addGap(0, 26, Short.MAX_VALUE))
            .addComponent(jSeparator1)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator3)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lbl_copyright))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_tblPagList_prev1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_tblPagList_next1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1)
                                .addComponent(txt_searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_logout)
                    .addComponent(lbl_loggedUser))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId4)
                    .addComponent(comBox_flight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(lbl_routeInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_departure)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_arrival)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_seatcapacity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_add)
                    .addComponent(btn_update)
                    .addComponent(btn_delete)
                    .addComponent(btn_reset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(txt_searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_tblPagList_prev1)
                    .addComponent(btn_tblPagList_next1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_copyright)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        CommonTask.switchView(this, new AdminDashboardView(this.userName));
    }//GEN-LAST:event_btn_backActionPerformed

    private void lbl_logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_logoutMouseClicked
        CommonTask.switchView(this, new LoginView());
    }//GEN-LAST:event_lbl_logoutMouseClicked

    private void comBox_flightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comBox_flightActionPerformed
        lbl_seatcapacity.setText("");
        lbl_routeInfo.setText("");
        lbl_departure.setText("");
        lbl_arrival.setText("");

        String selectedFlightInfo = (String) comBox_flight.getSelectedItem();
        if (selectedFlightInfo != null) {
            FlightResponseDTO selectedFlight = flightWithoutFlightClassPriceInfoMap.get(selectedFlightInfo);

            if (selectedFlight != null) {
                selectedFlight_Id = selectedFlight.getFlight_id(); // Store selected selectedFlight ID

                loadSelectedFlightInfo();
            }
        }
    }//GEN-LAST:event_comBox_flightActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        deleteAllFlightClassPriceForFlight();
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        updateFlightClassPrice();
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        addFlightClassPrice();
    }//GEN-LAST:event_btn_addActionPerformed

    private void tbl_flightClassPricesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_flightClassPricesListMouseClicked
        getSelectedRow();
    }//GEN-LAST:event_tbl_flightClassPricesListMouseClicked

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed
        resetUIAfterOperation();
    }//GEN-LAST:event_btn_resetActionPerformed

    private void txt_searchBarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchBarFocusGained
        if (txt_searchBar.getText().equals("Search here ...")) {
            txt_searchBar.setText("");  // Clear the placeholder text when the user clicks on the field
        }
    }//GEN-LAST:event_txt_searchBarFocusGained

    private void txt_searchBarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchBarFocusLost
        if (txt_searchBar.getText().isEmpty()) {
            txt_searchBar.setText("Search here ...");  // Restore placeholder text if the user left the field empty
        }
    }//GEN-LAST:event_txt_searchBarFocusLost

    private void txt_searchBarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchBarKeyTyped
        handleSearch();
    }//GEN-LAST:event_txt_searchBarKeyTyped

    private void btn_tblPagList_prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_prevActionPerformed
        if (paginatedUI != null) {
            paginatedUI.previousPage();
        }
    }//GEN-LAST:event_btn_tblPagList_prevActionPerformed

    private void btn_tblPagList_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_nextActionPerformed
        if (paginatedUI != null) {
            paginatedUI.nextPage();
        }
    }//GEN-LAST:event_btn_tblPagList_nextActionPerformed

    private void btn_tblPagList_prev1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_prev1ActionPerformed
        if (paginatedUI != null) {
            paginatedUI.previousPage();
        }
    }//GEN-LAST:event_btn_tblPagList_prev1ActionPerformed

    private void btn_tblPagList_next1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_next1ActionPerformed
        if (paginatedUI != null) {
            paginatedUI.nextPage();
        }
    }//GEN-LAST:event_btn_tblPagList_next1ActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FlightClassPricingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FlightClassPricingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FlightClassPricingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FlightClassPricingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new FlightClassPriceView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_reset;
    private javax.swing.JButton btn_tblPagList_next;
    private javax.swing.JButton btn_tblPagList_next1;
    private javax.swing.JButton btn_tblPagList_prev;
    private javax.swing.JButton btn_tblPagList_prev1;
    private javax.swing.JButton btn_update;
    private javax.swing.JComboBox<String> comBox_flight;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblId4;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lbl_arrival;
    private javax.swing.JLabel lbl_copyright;
    private javax.swing.JLabel lbl_departure;
    private javax.swing.JLabel lbl_loggedUser;
    private javax.swing.JLabel lbl_logout;
    private javax.swing.JLabel lbl_routeInfo;
    private javax.swing.JLabel lbl_seatcapacity;
    private javax.swing.JTable tbl_editableClassPriceAddingList;
    private javax.swing.JTable tbl_flightClassPricesList;
    private javax.swing.JTextField txt_searchBar;
    // End of variables declaration//GEN-END:variables

    //--------------------- [ Start - btn handle] ------------------------------ 
    private void initCommonLabels() {
        lbl_loggedUser.setText("( " + this.userName + " )");
        lbl_logout.setText("<html><u>(Logout)</u></html>");
        lbl_logout.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        lbl_copyright.setText("@Dannoruwa-Anush 2025");
    }

    //-------------------||||||| Start : input field validation |||||||---------
    private boolean isInputFieldsValid() {
        return isFlightSelectionValid() && validateTotalSeats();
    }

    private boolean isFlightSelectionValid() {
        if (!FormValidationUtil.isIdSelectionValid(selectedFlight_Id)) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a flight");
            return false;
        }
        return true;
    }

    private boolean validateTotalSeats() {
        if (tbl_editableClassPriceAddingList.isEditing()) {
            tbl_editableClassPriceAddingList.getCellEditor().stopCellEditing();
        }

        int rowCount = tbl_editableClassPriceAddingList.getRowCount();
        int totalSeats = 0;

        for (int i = 0; i < rowCount; i++) {
            Object value = tbl_editableClassPriceAddingList.getValueAt(i, 4);
            System.out.println("Row " + (i + 1) + " value: " + value + " (" + (value != null ? value.getClass().getSimpleName() : "null") + ")");

            switch (value) {
                case null -> {
                    CommonMessageBoxUI.showOperationFailMessageBox(this, "Seat count is missing at row " + (i + 1));
                    return false;
                }
                case Integer integer -> {
                    if (integer <= 0) {
                        CommonMessageBoxUI.showOperationFailMessageBox(this, "Seat count must be a positive number at row " + (i + 1));
                        return false;
                    }
                    totalSeats += integer;
                }
                case String string -> {
                    try {
                        int parsedSeats = Integer.parseInt(string.trim());
                        if (parsedSeats <= 0) {
                            CommonMessageBoxUI.showOperationFailMessageBox(this, "Seat count must be a positive number at row " + (i + 1));
                            return false;
                        }
                        totalSeats += parsedSeats;
                    } catch (NumberFormatException e) {
                        CommonMessageBoxUI.showOperationFailMessageBox(this, "Invalid number of seats at row " + (i + 1));
                        return false;
                    }
                }
                case Double doubleVal -> {
                    int parsedSeats = (int) Math.floor(doubleVal);
                    if (parsedSeats <= 0) {
                        CommonMessageBoxUI.showOperationFailMessageBox(this, "Seat count must be a positive number at row " + (i + 1));
                        return false;
                    }
                    totalSeats += parsedSeats;
                }
                default -> {
                    CommonMessageBoxUI.showOperationFailMessageBox(this, "Unexpected data type at row " + (i + 1));
                    return false;
                }
            }
        }

        if (totalSeats != selectedFlightTotalSeatingCapacity) {
            CommonMessageBoxUI.showOperationFailMessageBox(this,
                    "Total number of seats must be exactly " + selectedFlightTotalSeatingCapacity
                    + ".\nCurrently entered: " + totalSeats);
            return false;
        }

        return true;
    }
    //-------------------||||||| End : input field validation |||||||-----------

    //-------------------||||||| Start : load for comBox |||||| ----------------
    //******* [Start : input table section combox] **********
    private void loadAllFlightsWithoutFlightClassPriceInfo() {
        try {
            List<FlightResponseDTO> flights = flightController.getAllFlightsWithoutFlightClassPriceInfo();
            FlightsWithoutFlightClassPriceInfoIntoComboBoxes(flights);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    private void FlightsWithoutFlightClassPriceInfoIntoComboBoxes(List<FlightResponseDTO> flights) {
        for (FlightResponseDTO flight : flights) {
            comBox_flight.addItem(flight.getFlightInfo()); // Add only the flight info
            flightWithoutFlightClassPriceInfoMap.put(flight.getFlightInfo(), flight); // Store the full object in the map
        }
    }
    //******* [End : input table section combox] **********

    //Note : Object... args is a varargs(Variable Arguments) parameter
    private void setComboBoxesHeaders(boolean isUpdate, Object... args) {
        comBox_flight.removeAllItems();

        if (isUpdate) {
            // Check if args is not empty and contains expected types
            if (args.length >= 1 && args[0] instanceof String) {
                String flightsWithoutFlightClassPriceInfo = (String) args[0];

                comBox_flight.addItem(flightsWithoutFlightClassPriceInfo);
            } else {
                // Handle error or invalid input scenario
                System.out.println("Invalid arguments passed for flight info.");
            }
        } else {
            comBox_flight.addItem("Select");
        }
    }
    //-------------------||||||| End : load for comBox |||||| ------------------

    //-------------------||||||| Start : load for input table |||||| -----------
    private void loadSelectedFlightInfo() {
        if (!FormValidationUtil.isIdSelectionValid(selectedFlight_Id)) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a flight.");
            return;
        }

        try {
            FlightResponseDTO flight = flightController.getFlightById(selectedFlight_Id);

            if (flight == null || flight.getAircraftModel() == null) {
                CommonMessageBoxUI.showOperationFailMessageBox(this, "Flight or aircraft model information is incomplete.");
                lbl_seatcapacity.setText("");
                lbl_routeInfo.setText("");
                lbl_departure.setText("");
                lbl_arrival.setText("");
                return;
            }

            selectedFlightTotalSeatingCapacity = flight.getAircraftModel().getAircraftModel_SeatCapacity();
            lbl_seatcapacity.setText("The maximum seating capacity can be allocated across different classes : " + selectedFlightTotalSeatingCapacity);
            lbl_routeInfo.setText("Route Info                 : " + flight.getRoute().getRouteInfo());
            lbl_departure.setText("Departure                  : " + flight.getFlight_departure_time());
            lbl_arrival.setText(  "Arrival                       : " + flight.getFlight_arrival_time());
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    private void loadAllBookingClass() {
        try {
            List<BookingClassResponseDTO> bookingClasses = bookingClassController.getAllBookingClasses();
            loadBookingClassIntoTable(bookingClasses, null);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    private void loadBookingClassIntoTable(List<BookingClassResponseDTO> bookingClasses, List<FlightClassPriceResponseDTO> flightClassPrices) {
        String[] columns = {"bookingClass_Id", "No", "Booking Class Name", "Base Price (Rs.)", "Number of Seats"};

        Object[][] data = new Object[bookingClasses.size()][5];

        for (int i = 0; i < bookingClasses.size(); i++) {
            BookingClassResponseDTO bc = bookingClasses.get(i);
            data[i][0] = bc.getBookingClass_id(); // bookingClass_Id (hidden)
            data[i][1] = i + 1; // Row number
            data[i][2] = bc.getBookingClass_name(); // Booking Class Name

            // Default values
            double basePrice = 0.0;
            int seatCapacity = 0;

            // If flightClassPrices is provided, find a match
            if (flightClassPrices != null && !flightClassPrices.isEmpty()) {
                for (FlightClassPriceResponseDTO fcp : flightClassPrices) {
                    if (fcp.getBookingClass() != null
                            && fcp.getBookingClass().getBookingClass_id() == bc.getBookingClass_id()) {
                        basePrice = fcp.getBase_price().doubleValue();
                        seatCapacity = fcp.getSeat_capacity();
                        break;
                    }
                }
            }

            data[i][3] = basePrice;
            data[i][4] = seatCapacity;
        }

        DefaultTableModel model = new DefaultTableModel(data, columns) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Only allow editing Base Price and Number of Seats
                return column == 3 || column == 4;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return switch (columnIndex) {
                    case 0, 1 ->
                        Integer.class;
                    case 2 ->
                        String.class;
                    case 3 ->
                        Double.class;
                    case 4 ->
                        Integer.class;
                    default ->
                        Object.class;
                };
            }
        };

        tbl_editableClassPriceAddingList.setModel(model);

        // Hide bookingClass_Id column
        tbl_editableClassPriceAddingList.getColumnModel().getColumn(0).setMinWidth(0);
        tbl_editableClassPriceAddingList.getColumnModel().getColumn(0).setMaxWidth(0);
        tbl_editableClassPriceAddingList.getColumnModel().getColumn(0).setWidth(0);
    }
    //-------------------||||||| End : load for input table |||||| -------------

    //-------------------||||||| Start : load for output table |||||| -----------------
    private void getSelectedRow() {

        Integer id = getSelectedFlightIdFromTable();
        if (id == null) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a valid flight.");
            return;
        }
        selectedFlight_Id = id;
        try {
            List<FlightClassPriceResponseDTO> flightClassPriceResponseDTOs = flightClassPriceController.getAllFlightClassPriceByFlightId(id);
            List<BookingClassResponseDTO> bookingClassResponseDTOs = new ArrayList<>();
            for (FlightClassPriceResponseDTO fcpDTO : flightClassPriceResponseDTOs) {
                bookingClassResponseDTOs.add(fcpDTO.getBookingClass());
            }

            //In here, group of obj array is handled and all of them have same flight_id, hence flight_info is extrcted from very first one (arrayObj.getFirst()) 
            setComboBoxesHeaders(true, flightClassPriceResponseDTOs.getFirst().getFlight().getFlightInfo(), flightClassPriceResponseDTOs.getFirst().getFlight().getFlightInfo());
            loadBookingClassIntoTable(bookingClassResponseDTOs, flightClassPriceResponseDTOs);
            selectedFlightTotalSeatingCapacity = flightClassPriceResponseDTOs.getFirst().getFlight().getAircraftModel().getAircraftModel_SeatCapacity();
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Error loading flight.");
        }
    }

    private Integer getSelectedFlightIdFromTable() {
        int selectedRow = tbl_flightClassPricesList.getSelectedRow();
        if (selectedRow == -1) {
            return null;
        }

        Object idObj = tbl_flightClassPricesList.getValueAt(selectedRow, 0); //get flightId
        if (idObj == null || idObj.toString().isBlank()) {
            return null;
        }

        try {
            return Integer.valueOf(idObj.toString());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private void loadFlightClassPricesIntoTable(List<FlightClassPriceResponseDTO> classPrices) {
        String[] columns = {"flight_Id", "class_Id", "No", "Flight Info", "Route Info", "Departure Time", "Class", "Price(Rs.)", "#Seats"};

        paginatedUI = new PaginatedTableUI<>(
                tbl_flightClassPricesList,
                columns,
                // pass a function (lambda) | This function will take single 'ObjResponseDTO' object into a String array
                classPrice -> new String[]{
                    String.valueOf(classPrice.getFlight().getFlight_id()),
                    String.valueOf(classPrice.getBookingClass().getBookingClass_id()),
                    String.valueOf(classPrices.indexOf(classPrice) + 1),
                    classPrice.getFlight().getFlightInfo(),
                    classPrice.getFlight().getRoute().getRouteInfo(),
                    String.valueOf(classPrice.getFlight().getFlight_departure_time()),
                    String.valueOf(classPrice.getBookingClass().getBookingClass_name()),
                    String.valueOf(classPrice.getBase_price()),
                    String.valueOf(classPrice.getSeat_capacity())
                },
                10 //page size
        );

        paginatedUI.setData(classPrices);

        //******** [Start : composite key] **********
        // Hide ID column : 0 (done by paginator)
        // Hide ID column : 1
        tbl_flightClassPricesList.getColumnModel().getColumn(1).setMinWidth(0);
        tbl_flightClassPricesList.getColumnModel().getColumn(1).setMaxWidth(0);
        tbl_flightClassPricesList.getColumnModel().getColumn(1).setWidth(0);
        //******** [End : composite key] **********

        // Set widths for visible columns
        tbl_flightClassPricesList.getColumnModel().getColumn(3).setPreferredWidth(80);   // Flight Info
        tbl_flightClassPricesList.getColumnModel().getColumn(4).setPreferredWidth(200);  // Route Info
        tbl_flightClassPricesList.getColumnModel().getColumn(5).setPreferredWidth(120);  // Departure Time
        tbl_flightClassPricesList.getColumnModel().getColumn(6).setPreferredWidth(120);  // Class
        tbl_flightClassPricesList.getColumnModel().getColumn(7).setPreferredWidth(100);  // Base price
        tbl_flightClassPricesList.getColumnModel().getColumn(8).setPreferredWidth(100);  // seat capacity
    }

    private void loadAllFlightClassPrices() {
        try {
            List<FlightClassPriceResponseDTO> classPrices = flightClassPriceController.getAllFlightClassPrices();
            loadFlightClassPricesIntoTable(classPrices);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    private void loadAllSearchKeyMatchFlightClassPrices(String searchKey) {
        try {
            List<FlightClassPriceResponseDTO> classPrices = flightClassPriceController.getAllFlightClassPricesBySearchKey(searchKey);
            loadFlightClassPricesIntoTable(classPrices);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to load search results.");
        }
    }

    private void handleSearch() {
        String searchKey = txt_searchBar.getText().trim();
        if (!searchKey.isEmpty()) {
            loadAllSearchKeyMatchFlightClassPrices(searchKey);
        } else {
            loadAllFlightClassPrices();
        }
    }
    //-------------------||||||| End : load for output table |||||| -----------------

    private void setupTableSelectionListener() {
        tbl_flightClassPricesList.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                handleCRUDButtonsState();
            }
        });
    }

    private void handleCRUDButtonsState() {
        int selectedRow = tbl_flightClassPricesList.getSelectedRow();
        boolean isRowSelected = (selectedRow != -1);
        setCrudButtonsVisibilityForTableSelection(isRowSelected);
    }

    private void setCrudButtonsVisibilityForTableSelection(boolean isSelected) {
        btn_add.setVisible(!isSelected); // hide add when row selected
        btn_update.setVisible(isSelected);
        btn_delete.setVisible(isSelected);
        btn_reset.setVisible(isSelected);
    }

    private List<FlightClassPriceRequestDTO> buildCollectFlightClassPriceRequests() {
        DefaultTableModel model = (DefaultTableModel) tbl_editableClassPriceAddingList.getModel();
        int rowCount = model.getRowCount();
        List<FlightClassPriceRequestDTO> requests = new ArrayList<>();

        for (int i = 0; i < rowCount; i++) {
            try {
                int bookingClassId = (int) model.getValueAt(i, 0);
                Object priceObj = model.getValueAt(i, 3);
                Object seatObj = model.getValueAt(i, 4);

                if (priceObj == null || seatObj == null) {
                    CommonMessageBoxUI.showOperationFailMessageBox(this, "Price or seat value missing at row " + (i + 1));
                    return null;
                }

                BigDecimal base_price = new BigDecimal(priceObj.toString().trim()).setScale(2, RoundingMode.HALF_UP);
                int seat_capacity = Integer.parseInt(seatObj.toString().trim());

                if (seat_capacity <= 0 || base_price.compareTo(BigDecimal.ZERO) < 0) {
                    CommonMessageBoxUI.showOperationFailMessageBox(this, "Invalid seat count or price at row " + (i + 1));
                    return null;
                }

                requests.add(new FlightClassPriceRequestDTO(
                        selectedFlight_Id,
                        bookingClassId,
                        base_price,
                        seat_capacity
                ));
            } catch (NumberFormatException ex) {
                AuditUtil.logException(this.getClass(), ex);
                CommonMessageBoxUI.showOperationFailMessageBox(this, "Invalid data at row " + (i + 1) + ": " + ex.getMessage());
                return null;
            }
        }

        return requests;
    }

    //****** [Start : add] ***************
    private void addFlightClassPrice() {
        if (!isInputFieldsValid()) {
            return;
        }

        List<FlightClassPriceRequestDTO> requests = buildCollectFlightClassPriceRequests();
        if (requests == null) {
            return;
        }
        try {
            String result = flightClassPriceController.addBulkFlightClassPrice(requests);
            postOperationSuccess(result);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to save flight class pricing.");
        }
    }
    //****** [End : add] ***************

    //****** [Start : update] ***************
    private void updateFlightClassPrice() {
        if (!showUpdateConfirmation()) {
            return;
        }

        if (!isInputFieldsValid()) {
            return;
        }

        List<FlightClassPriceRequestDTO> requests = buildCollectFlightClassPriceRequests();
        if (requests == null) {
            return;
        }

        try {
            String result = flightClassPriceController.updateBulkFlightClassPrice(requests);
            postOperationSuccess(result);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to update flight class pricing.");
        }
    }

    private boolean showUpdateConfirmation() {
        return CommonMessageBoxUI.showOkCancelConfirmationMessageBox(
                this,
                "Are you sure you want to update these flight class pricing info?",
                "Confirm Update"
        );
    }
    //****** [End : update] *****************

    //****** [Start : delete] ***************
    private void deleteAllFlightClassPriceForFlight() {
        if (!isFlightSelectionValid()) {
            return;
        }

        if (!confirmDeletion()) {
            return;
        }

        try {
            performDelete(selectedFlight_Id);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    private boolean confirmDeletion() {
        return CommonMessageBoxUI.showOkCancelConfirmationMessageBox(
                this,
                "Are you sure you want to delete all these flight class pricing? This action cannot be undone.",
                "Confirm Deletion"
        );
    }

    private void performDelete(Integer id) throws Exception {
        String result = flightClassPriceController.deleteAllFlightClassPriceByFlightId(id);
        postOperationSuccess(result);
    }
    //****** [End : delete] *****************

    //****** [Start : Reset] ***************
    private void clearForm() {
        resetLabels();
        resetSelectionState();
        resetComboBoxes();
        resetTableSelection();
    }

    private void resetLabels() {
        lbl_seatcapacity.setText("");
        lbl_routeInfo.setText("");
        lbl_departure.setText("");
        lbl_arrival.setText("");
    }

    private void resetSelectionState() {
        selectedFlight_Id = -1;
        selectedFlightTotalSeatingCapacity = -1;
    }

    private void resetComboBoxes() {
        resetComboBox(comBox_flight);
    }

    private void resetComboBox(JComboBox<String> comboBox) {
        comboBox.removeAllItems();
        comboBox.addItem("Select");
    }

    private void resetTableSelection() {
        tbl_flightClassPricesList.clearSelection();
        setCrudButtonsVisibilityForTableSelection(false);
    }

    private void initializeUIState() {
        initCommonLabels();
        lbl_seatcapacity.setText("");
        lbl_routeInfo.setText("");
        lbl_departure.setText("");
        lbl_arrival.setText("");
        setupTableSelectionListener();

        loadAllFlightClassPrices();
        loadAllBookingClass();

        setComboBoxesHeaders(false);
        loadAllFlightsWithoutFlightClassPriceInfo(); // for input table section combo box
    }

    private void postOperationSuccess(String message) {
        CommonMessageBoxUI.showOperationSuccessMessageBox(this, message);
        resetUIAfterOperation();
    }

    private void resetUIAfterOperation() {
        clearForm();
        initializeUIState();
    }
    //****** [End : Reset] ***************
    //--------------------- [ End - btn handle] --------------------------------
}
