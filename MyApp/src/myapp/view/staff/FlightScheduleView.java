/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myapp.view.staff;

import java.awt.Cursor;
import java.awt.event.ItemEvent;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import myapp.controller.AircraftModelController;
import myapp.controller.FlightScheduleController;
import myapp.controller.RouteController;
import myapp.dto.aircraftModel.AircraftModelResponseDTO;
import myapp.dto.flightSchedule.FlightScheduleRequestDTO;
import myapp.dto.flightSchedule.FlightScheduleResponseDTO;
import myapp.dto.route.RouteResponseDTO;
import myapp.util.audit.AuditUtil;
import myapp.util.commonTask.CommonTask;
import myapp.util.commonUI.CommonMessageBoxUI;
import myapp.util.commonUI.DateTimePickerUI;
import myapp.util.commonUI.PaginatedTableUI;
import myapp.util.formValidation.FormValidationUtil;
import myapp.view.LoginView;

/**
 *
 * @author HP
 */
public class FlightScheduleView extends javax.swing.JFrame {

    /**
     * Creates new form FlightScheduleView
     */
    private final FlightScheduleController flightScheduleController;
    private final String userName;
    private PaginatedTableUI<FlightScheduleResponseDTO> paginatedUI;
    
    private final AircraftModelController aircraftModelController;
    private final RouteController routeController;
        
    //****** [Start : const for check boxes] ***********************************
    private final Set<String> selectedScheduleDaysSet = new HashSet<>();
    private final List<JCheckBox> scheduleDayCheckboxes = new ArrayList<>();
    private final Map<String, JCheckBox> dayCheckboxMap = new HashMap<>();
    private static final List<String> WEEK_DAYS_ORDER = Arrays.asList(
            "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"
    );
    //****** [End : const for check boxes] *************************************
    
    
    //****** [End : const for combo boxes] *************************************
     private Map<String, AircraftModelResponseDTO> aircraftModelMap; // Map to store flight_name -> AircraftModelResponseDTO
    private Map<String, RouteResponseDTO> routeMap; // Map to store route_name -> RouteResponseDTO
    //****** [End : const for combo boxes] *************************************
      
    private int selectedAircraftModel_Id;
    private int selectedRoute_Id;

    public FlightScheduleView(String userName) {
        initComponents();
        this.userName = userName;

        flightScheduleController = new FlightScheduleController();
        aircraftModelController = new AircraftModelController();
        routeController = new RouteController();

        aircraftModelMap = new HashMap<>();
        routeMap = new HashMap<>();

        clearForm();
        initializeUIState();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_back = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();
        lblId6 = new javax.swing.JLabel();
        lblId7 = new javax.swing.JLabel();
        txt_schedule_DepartureTime = new javax.swing.JTextField();
        btn_departureDateTime = new javax.swing.JButton();
        btn_arrivalDateTime = new javax.swing.JButton();
        txt_schedule_ArrivalTime = new javax.swing.JTextField();
        btn_reset = new javax.swing.JButton();
        btn_tblPagList_next = new javax.swing.JButton();
        btn_add = new javax.swing.JButton();
        btn_tblPagList_prev = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        lbl_logout = new javax.swing.JLabel();
        btn_delete = new javax.swing.JButton();
        lbl_loggedUser = new javax.swing.JLabel();
        comBox_route = new javax.swing.JComboBox<>();
        comBox_aircraftModel = new javax.swing.JComboBox<>();
        lblId5 = new javax.swing.JLabel();
        lblId4 = new javax.swing.JLabel();
        lblId2 = new javax.swing.JLabel();
        txt_shedule_code = new javax.swing.JTextField();
        lblId3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_flightSheduleList = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        lbl_copyright = new javax.swing.JLabel();
        txt_searchBar = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        txt_schedule_airline = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        chk_box_tue = new javax.swing.JCheckBox();
        chk_box_mon = new javax.swing.JCheckBox();
        chk_box_wed = new javax.swing.JCheckBox();
        chk_box_thu = new javax.swing.JCheckBox();
        chk_box_fri = new javax.swing.JCheckBox();
        chk_box_sat = new javax.swing.JCheckBox();
        chk_box_sun = new javax.swing.JCheckBox();
        lblId8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btn_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myapp/resource/img/back-arrow.jpg"))); // NOI18N
        btn_back.setBorder(null);
        btn_back.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_back.setMaximumSize(new java.awt.Dimension(39, 16));
        btn_back.setMinimumSize(new java.awt.Dimension(39, 16));
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        lblTitle1.setBackground(new java.awt.Color(204, 204, 204));
        lblTitle1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("Weekly Flight Schedule");

        lblId6.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId6.setText("Arrival Time :");

        lblId7.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId7.setText("Departure Time :");

        btn_departureDateTime.setText("...");
        btn_departureDateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_departureDateTimeActionPerformed(evt);
            }
        });

        btn_arrivalDateTime.setText("...");
        btn_arrivalDateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_arrivalDateTimeActionPerformed(evt);
            }
        });

        btn_reset.setText("Reset");
        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });

        btn_tblPagList_next.setText(">");
        btn_tblPagList_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_nextActionPerformed(evt);
            }
        });

        btn_add.setLabel("Add");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_tblPagList_prev.setText("<");
        btn_tblPagList_prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_prevActionPerformed(evt);
            }
        });

        btn_update.setLabel("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        lbl_logout.setForeground(new java.awt.Color(0, 51, 255));
        lbl_logout.setText("(logout)");
        lbl_logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_logoutMouseClicked(evt);
            }
        });

        btn_delete.setLabel("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        lbl_loggedUser.setForeground(new java.awt.Color(0, 51, 255));
        lbl_loggedUser.setText("(username)");

        comBox_route.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comBox_route.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comBox_routeActionPerformed(evt);
            }
        });

        comBox_aircraftModel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comBox_aircraftModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comBox_aircraftModelActionPerformed(evt);
            }
        });

        lblId5.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId5.setText("Route :");

        lblId4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId4.setText("Aircraft Model :");

        lblId2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId2.setText("Code : ");

        lblId3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId3.setText("Airline :");

        tbl_flightSheduleList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_flightSheduleList.setFillsViewportHeight(true);
        tbl_flightSheduleList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_flightSheduleListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_flightSheduleList);

        jLabel2.setText("Airline Ticket Booking System");

        lbl_copyright.setText("@C");

        txt_searchBar.setText("Search here...");
        txt_searchBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_searchBarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_searchBarFocusLost(evt);
            }
        });
        txt_searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_searchBarKeyTyped(evt);
            }
        });

        chk_box_tue.setText("Tuesday");

        chk_box_mon.setText("Monday");
        chk_box_mon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_box_monActionPerformed(evt);
            }
        });

        chk_box_wed.setText("Wednesday");

        chk_box_thu.setText("Thursday");

        chk_box_fri.setText("Friday");

        chk_box_sat.setText("Saturday");

        chk_box_sun.setText("Sunday");

        lblId8.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId8.setText("Available for departure on :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator3)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btn_tblPagList_prev)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_tblPagList_next))
                                    .addComponent(txt_searchBar)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(lbl_logout)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_loggedUser)
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblId2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblId4)
                                    .addComponent(lblId8))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txt_shedule_code, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comBox_aircraftModel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(txt_schedule_DepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btn_departureDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(chk_box_mon)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chk_box_tue)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chk_box_wed))))
                            .addComponent(lblId7))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblId3)
                                    .addComponent(lblId5)
                                    .addComponent(lblId6))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txt_schedule_ArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_arrivalDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(comBox_route, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_schedule_airline, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_box_thu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_box_fri)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_box_sat)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_box_sun)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(283, 283, 283)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbl_copyright)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_reset)
                .addGap(8, 8, 8)
                .addComponent(btn_update)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_delete)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_logout)
                    .addComponent(lbl_loggedUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblId2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_shedule_code, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblId7)
                            .addComponent(txt_schedule_DepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_departureDateTime)
                            .addComponent(lblId6)
                            .addComponent(txt_schedule_ArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_arrivalDateTime))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblId4)
                            .addComponent(comBox_aircraftModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblId3)
                            .addComponent(txt_schedule_airline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblId5)
                            .addComponent(comBox_route, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chk_box_mon)
                    .addComponent(lblId8)
                    .addComponent(chk_box_tue)
                    .addComponent(chk_box_wed)
                    .addComponent(chk_box_thu)
                    .addComponent(chk_box_fri)
                    .addComponent(chk_box_sat)
                    .addComponent(chk_box_sun))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_add)
                    .addComponent(btn_update)
                    .addComponent(btn_delete)
                    .addComponent(btn_reset))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_tblPagList_prev)
                    .addComponent(btn_tblPagList_next))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_copyright)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        CommonTask.switchView(this, new AdminDashboardView(this.userName));
    }//GEN-LAST:event_btn_backActionPerformed

    private void btn_departureDateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_departureDateTimeActionPerformed
        LocalTime selectedTime = DateTimePickerUI.showTimePickerDialog("Select Departure Time");
        if (selectedTime != null) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
            txt_schedule_DepartureTime.setText(selectedTime.format(formatter));
        }
    }//GEN-LAST:event_btn_departureDateTimeActionPerformed

    private void btn_arrivalDateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_arrivalDateTimeActionPerformed
        LocalTime selectedTime = DateTimePickerUI.showTimePickerDialog("Select Arrival Time");
        if (selectedTime != null) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
            txt_schedule_ArrivalTime.setText(selectedTime.format(formatter));
        }
    }//GEN-LAST:event_btn_arrivalDateTimeActionPerformed

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed
        resetUIAfterOperation();
    }//GEN-LAST:event_btn_resetActionPerformed

    private void btn_tblPagList_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_nextActionPerformed
        if (paginatedUI != null) {
            paginatedUI.nextPage();
        }
    }//GEN-LAST:event_btn_tblPagList_nextActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        addFlightSchedule();
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_tblPagList_prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_prevActionPerformed
        if (paginatedUI != null) {
            paginatedUI.previousPage();
        }
    }//GEN-LAST:event_btn_tblPagList_prevActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        updateFlightSchedule();
    }//GEN-LAST:event_btn_updateActionPerformed

    private void lbl_logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_logoutMouseClicked
        CommonTask.switchView(this, new LoginView());
    }//GEN-LAST:event_lbl_logoutMouseClicked

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        deleteFlightSchedule();
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void comBox_routeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comBox_routeActionPerformed
        String selectedRouteInfo = (String) comBox_route.getSelectedItem();
        if (selectedRouteInfo != null) {
            RouteResponseDTO selectedRoute = routeMap.get(selectedRouteInfo);

            if (selectedRoute != null) {
                selectedRoute_Id = selectedRoute.getRoute_id(); // Store selected selectedRoute ID
            }
        }
    }//GEN-LAST:event_comBox_routeActionPerformed

    private void comBox_aircraftModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comBox_aircraftModelActionPerformed
        String selectedAircraftModelInfo = (String) comBox_aircraftModel.getSelectedItem();
        if (selectedAircraftModelInfo != null) {
            AircraftModelResponseDTO selectedAircraftModel = aircraftModelMap.get(selectedAircraftModelInfo);

            if (selectedAircraftModel != null) {
                selectedAircraftModel_Id = selectedAircraftModel.getAircraftModel_id(); // Store selected selectedAircraftModel ID
            }
        }
    }//GEN-LAST:event_comBox_aircraftModelActionPerformed

    private void tbl_flightSheduleListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_flightSheduleListMouseClicked
        getSelectedRow();
    }//GEN-LAST:event_tbl_flightSheduleListMouseClicked

    private void txt_searchBarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchBarFocusGained
        if (txt_searchBar.getText().equals("Search here ...")) {
            txt_searchBar.setText("");  // Clear the placeholder text when the user clicks on the field
        }
    }//GEN-LAST:event_txt_searchBarFocusGained

    private void txt_searchBarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchBarFocusLost
        if (txt_searchBar.getText().isEmpty()) {
            txt_searchBar.setText("Search here ...");  // Restore placeholder text if the user left the field empty
        }
    }//GEN-LAST:event_txt_searchBarFocusLost

    private void txt_searchBarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchBarKeyTyped
        handleSearch();
    }//GEN-LAST:event_txt_searchBarKeyTyped

    private void chk_box_monActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_box_monActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chk_box_monActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FlightScheduleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FlightScheduleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FlightScheduleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FlightScheduleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new FlightScheduleView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_arrivalDateTime;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_departureDateTime;
    private javax.swing.JButton btn_reset;
    private javax.swing.JButton btn_tblPagList_next;
    private javax.swing.JButton btn_tblPagList_prev;
    private javax.swing.JButton btn_update;
    private javax.swing.JCheckBox chk_box_fri;
    private javax.swing.JCheckBox chk_box_mon;
    private javax.swing.JCheckBox chk_box_sat;
    private javax.swing.JCheckBox chk_box_sun;
    private javax.swing.JCheckBox chk_box_thu;
    private javax.swing.JCheckBox chk_box_tue;
    private javax.swing.JCheckBox chk_box_wed;
    private javax.swing.JComboBox<String> comBox_aircraftModel;
    private javax.swing.JComboBox<String> comBox_route;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblId2;
    private javax.swing.JLabel lblId3;
    private javax.swing.JLabel lblId4;
    private javax.swing.JLabel lblId5;
    private javax.swing.JLabel lblId6;
    private javax.swing.JLabel lblId7;
    private javax.swing.JLabel lblId8;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lbl_copyright;
    private javax.swing.JLabel lbl_loggedUser;
    private javax.swing.JLabel lbl_logout;
    private javax.swing.JTable tbl_flightSheduleList;
    private javax.swing.JTextField txt_schedule_ArrivalTime;
    private javax.swing.JTextField txt_schedule_DepartureTime;
    private javax.swing.JTextField txt_schedule_airline;
    private javax.swing.JTextField txt_searchBar;
    private javax.swing.JTextField txt_shedule_code;
    // End of variables declaration//GEN-END:variables

    //--------------------- [ Start - btn handle] ------------------------------
    private void initCommonLabels() {
        lbl_loggedUser.setText("( " + this.userName + " )");
        lbl_logout.setText("<html><u>(Logout)</u></html>");
        lbl_logout.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        lbl_copyright.setText("@Dannoruwa-Anush 2025");
    }

    //-------------------||||||| Start : input field validation |||||||---------
    private boolean isInputFieldsValid() {
        return isCodeValid() && isAirlineValid() && isScheduleValid() && isRouteSelectionValid() && isAircraftModelSelectionValid() && isSelectedScheduleDaysValid();
    }

    private boolean isCodeValid() {
        String flightScheduleCode = txt_shedule_code.getText().trim();
        if (!FormValidationUtil.isValidTxtField(flightScheduleCode)) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Code cannot be empty.");
            return false;
        }
        return true;
    }

    private boolean isAirlineValid() {
        String airline = txt_schedule_airline.getText().trim();
        if (!FormValidationUtil.isValidTxtField(airline)) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Airline cannot be empty.");
            return false;
        }
        return true;
    }

    //****** [Start : schedule validation] *******
    private boolean isScheduleValid() {
        String arrivalTimeStr = txt_schedule_ArrivalTime.getText().trim();
        String departureTimeStr = txt_schedule_DepartureTime.getText().trim();

        if (!isArrivalTimeValid(arrivalTimeStr) || !isDepartureTimeValid(departureTimeStr)) {
            return false;
        }

        LocalTime arrival = fromStringToLocalTime(arrivalTimeStr);
        LocalTime departure = fromStringToLocalTime(departureTimeStr);

        if (arrival == null || departure == null) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Invalid time format. Please use HH:mm.");
            return false;
        }

        if (!arrival.isAfter(departure)) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Arrival time must be after departure time.");
            return false;
        }

        return true;
    }

    private boolean isArrivalTimeValid(String arrivalTime) {
        if (!FormValidationUtil.isValidTxtField(arrivalTime)) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Arrival time cannot be empty.");
            return false;
        }
        return true;
    }

    private boolean isDepartureTimeValid(String departureTime) {
        if (!FormValidationUtil.isValidTxtField(departureTime)) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Departure time cannot be empty.");
            return false;
        }
        return true;
    }

    //Helper method string -> LoacalTime
    private LocalTime fromStringToLocalTime(String timeString) {
        try {
            return LocalTime.parse(timeString.trim(), DateTimeFormatter.ofPattern("HH:mm"));
        } catch (DateTimeParseException e) {
            System.err.println("Invalid time format: " + timeString);
            return null;
        }
    }

    //Helper method LoacalTime -> String
    private String fromLocalTimeToString(LocalTime time) {
        if (time == null) {
            return "";
        }
        return time.format(DateTimeFormatter.ofPattern("HH:mm"));
    }
    //****** [End : schedule validation] *******

    private boolean isRouteSelectionValid() {
        if (!FormValidationUtil.isIdSelectionValid(selectedRoute_Id)) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a route");
            return false;
        }
        return true;
    }

    private boolean isAircraftModelSelectionValid() {
        if (!FormValidationUtil.isIdSelectionValid(selectedAircraftModel_Id)) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select an aircraft");
            return false;
        }
        return true;
    }

    private boolean isSelectedScheduleDaysValid() {
        if (selectedScheduleDaysSet.isEmpty()) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select at least one day for the schedule.");
            return false;
        }
        return true;
    }
    //-------------------||||||| End : input field validation |||||||-----------

    //-------------------||||||| Start : load for comBox |||||| ----------------
    private void loadAllAircraftModels() {
        try {
            List<AircraftModelResponseDTO> aircrafts = aircraftModelController.getAllAircraftModels();
            loadAircraftModelsIntoComboBoxes(aircrafts);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Error loading aircraft model.");
        }
    }

    private void loadAircraftModelsIntoComboBoxes(List<AircraftModelResponseDTO> aircrafts) {
        // Loop through the list of airports and add them to both combo boxes
        for (AircraftModelResponseDTO aircraft : aircrafts) {
            comBox_aircraftModel.addItem(aircraft.getAircraftModelInfo()); // Add only the aircraftModel info
            aircraftModelMap.put(aircraft.getAircraftModelInfo(), aircraft); // Store the full object in the map
        }
    }

    private void loadAllRoutes() {
        try {
            List<RouteResponseDTO> routes = routeController.getAllRoutes();
            loadRoutesIntoComboBoxes(routes);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Error loading route.");
        }
    }

    private void loadRoutesIntoComboBoxes(List<RouteResponseDTO> routes) {
        // Loop through the list of airports and add them to both combo boxes
        for (RouteResponseDTO route : routes) {
            comBox_route.addItem(route.getRouteInfo()); // Add only the route info
            routeMap.put(route.getRouteInfo(), route); // Store the full object in the map
        }
    }

    //Note : Object... args is a varargs(Variable Arguments) parameter
    private void setComboBoxesHeaders(boolean isUpdate, Object... args) {
        comBox_aircraftModel.removeAllItems();
        comBox_route.removeAllItems();

        if (isUpdate) {
            // Check if args is not empty and contains expected types
            if (args.length >= 2 && args[0] instanceof String && args[1] instanceof String) {
                String aircraftModelInfo = (String) args[0];
                String routeInfo = (String) args[1];

                comBox_aircraftModel.addItem(aircraftModelInfo);
                comBox_route.addItem(routeInfo);
            } else {
                // Handle error or invalid input scenario
                System.out.println("Invalid arguments passed for combox header names.");
            }
        } else {
            comBox_aircraftModel.addItem("Select");
            comBox_route.addItem("Select");
        }
    }
    //-------------------||||||| End : load for comBox |||||| ------------------ 

    //-------------------||||||| Start : setup checkbox |||||| ------------------- 
    private void setupAllCheckboxes() {
        setupCheckbox(chk_box_mon, "Mon");
        setupCheckbox(chk_box_tue, "Tue");
        setupCheckbox(chk_box_wed, "Wed");
        setupCheckbox(chk_box_thu, "Thu");
        setupCheckbox(chk_box_fri, "Fri");
        setupCheckbox(chk_box_sat, "Sat");
        setupCheckbox(chk_box_sun, "Sun");
    }

    private void setupCheckbox(JCheckBox checkBox, String shortDay) {
        dayCheckboxMap.put(shortDay, checkBox);
        scheduleDayCheckboxes.add(checkBox);
        add(checkBox); // Add to panel layout

        checkBox.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                selectedScheduleDaysSet.add(shortDay);
            } else {
                selectedScheduleDaysSet.remove(shortDay);
            }
            //System.out.println("Selected Days: " + selectedScheduleDaysSet);
        });
    }

    public void applySelectedDays(Set<String> selectedDays) {
        clearDaySelections(); // Clear previous

        for (String day : selectedDays) {
            JCheckBox checkBox = dayCheckboxMap.get(day);
            if (checkBox != null) {
                checkBox.setSelected(true); // Also updates the set via listener
            }
        }
    }

    //-------------------||||||| End : setup checkbox |||||| --------------------- 
    //-------------------||||||| Start : load for table |||||| -----------------
    //Helper method Set -> comma seperated String
    private String setToCommaSeparatedString(Set<String> set) {
        return String.join(", ", set);
    }

    private void getSelectedRow() {
        Integer id = getSelectedFlightScheduleIdFromTable();
        if (id == null) {
            return;
        }

        try {
            FlightScheduleResponseDTO flightScheduleDTO = flightScheduleController.getFlightScheduleById(id);
            if (flightScheduleDTO != null) {
                txt_shedule_code.setText(flightScheduleDTO.getSchedule_flight_code());
                txt_schedule_airline.setText(flightScheduleDTO.getSchedule_airline_name());
                txt_schedule_ArrivalTime.setText(fromLocalTimeToString(flightScheduleDTO.getSchedule_arrival_time()));
                txt_schedule_DepartureTime.setText(fromLocalTimeToString(flightScheduleDTO.getSchedule_departure_time()));

                this.selectedAircraftModel_Id = flightScheduleDTO.getAircraftModel().getAircraftModel_id();
                this.selectedRoute_Id = flightScheduleDTO.getRoute().getRoute_id();
                setComboBoxesHeaders(true, flightScheduleDTO.getAircraftModel().getAircraftModelInfo(), flightScheduleDTO.getRoute().getRouteInfo());
        
                applySelectedDays(flightScheduleDTO.getSchedule_days_of_week());
                
                loadAllRoutes();
                loadAllAircraftModels();
            } else {
                CommonMessageBoxUI.showOperationFailMessageBox(this, "Flight schedule not found");
            }
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Error loading flight schedule.");
        }
    }

    private Integer getSelectedFlightScheduleIdFromTable() {
        int selectedRow = tbl_flightSheduleList.getSelectedRow();

        if (selectedRow == -1) {
            return null;
        }

        Object idObj = tbl_flightSheduleList.getValueAt(selectedRow, 0);
        if (idObj == null || idObj.toString().isBlank()) {
            return null;
        }

        try {
            return Integer.valueOf(idObj.toString());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private void loadFlightSchedulesIntoTable(List<FlightScheduleResponseDTO> flightSchedules) {
        String[] columns = {"flightSchedule_Id", "No", "Code", "Route Info", "Aircraft Info", "Departure Time", "Arrival Time", "Airline", "schedule"};

        paginatedUI = new PaginatedTableUI<>(
                tbl_flightSheduleList,
                columns,
                // pass a function (lambda) | This function will take single 'ObjResponseDTO' object into a String array
                flightSchedule -> new String[]{
                    String.valueOf(flightSchedule.getSchedule_id()),
                    String.valueOf(flightSchedules.indexOf(flightSchedule) + 1),
                    flightSchedule.getSchedule_flight_code(),
                    flightSchedule.getRoute().getRouteInfo(),
                    flightSchedule.getAircraftModel().getAircraftModelInfo(),
                    String.valueOf(flightSchedule.getSchedule_departure_time()),
                    String.valueOf(flightSchedule.getSchedule_arrival_time()),
                    String.valueOf(setToCommaSeparatedString(flightSchedule.getSchedule_days_of_week())),
                    flightSchedule.getSchedule_airline_name()
                //days
                },
                10 //page size
        );

        paginatedUI.setData(flightSchedules);

        // Set widths for visible columns
        tbl_flightSheduleList.getColumnModel().getColumn(2).setPreferredWidth(60);   // Code
        tbl_flightSheduleList.getColumnModel().getColumn(3).setPreferredWidth(200);  // Route Info
        tbl_flightSheduleList.getColumnModel().getColumn(4).setPreferredWidth(120);  // Aircraft Info
        tbl_flightSheduleList.getColumnModel().getColumn(5).setPreferredWidth(120);  // Departure Time
        tbl_flightSheduleList.getColumnModel().getColumn(6).setPreferredWidth(120);  // Arrival Time
        tbl_flightSheduleList.getColumnModel().getColumn(7).setPreferredWidth(100);  // Airline
    }

    private void loadAllFlightSchedules() {
        try {
            List<FlightScheduleResponseDTO> flightSchedules = flightScheduleController.getAllFlightSchedules();
            loadFlightSchedulesIntoTable(flightSchedules);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to load flight schedules.");
        }
    }

    private void loadAllSearchKeyMatchFlightSchedules(String searchKey) {
        try {
            List<FlightScheduleResponseDTO> flightSchedules = flightScheduleController.getAllFlightSchedulesBySearchKey(searchKey);
            loadFlightSchedulesIntoTable(flightSchedules);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to load search results.");
        }
    }

    private void handleSearch() {
        String searchKey = txt_searchBar.getText().trim();
        if (!searchKey.isEmpty()) {
            loadAllSearchKeyMatchFlightSchedules(searchKey);
        } else {
            loadAllFlightSchedules();
        }
    }

    //-------------------||||||| End : load for table |||||| -------------------
    private void setupTableSelectionListener() {
        tbl_flightSheduleList.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                handleCRUDButtonsState();
            }
        });
    }

    private void handleCRUDButtonsState() {
        int selectedRow = tbl_flightSheduleList.getSelectedRow();
        boolean isRowSelected = (selectedRow != -1);
        setCrudButtonsVisibilityForTableSelection(isRowSelected);
    }

    private void setCrudButtonsVisibilityForTableSelection(boolean isSelected) {
        btn_add.setVisible(!isSelected); // hide add when row selected
        btn_update.setVisible(isSelected);
        btn_delete.setVisible(isSelected);
        btn_reset.setVisible(isSelected);
    }

    private FlightScheduleRequestDTO buildFlightScheduleRequestDTO() {
        return new FlightScheduleRequestDTO(
                selectedRoute_Id,
                selectedAircraftModel_Id,
                txt_shedule_code.getText(),
                txt_schedule_airline.getText(),
                fromStringToLocalTime(txt_schedule_DepartureTime.getText().trim()),
                fromStringToLocalTime(txt_schedule_ArrivalTime.getText().trim()),
                getSortedSelectedScheduleDaysSet()
        );
    }
    
    //Helper method to sort days in the order from "Mon" to "Sun," regardless of the selection made.
    private Set<String> getSortedSelectedScheduleDaysSet() {
        return selectedScheduleDaysSet.stream()
                .sorted(Comparator.comparingInt(WEEK_DAYS_ORDER::indexOf))
                .collect(Collectors.toCollection(LinkedHashSet::new));
    }

    //****** [Start : add] ***************
    private void addFlightSchedule() {
        if (!isInputFieldsValid()) {
            return;
        }
        try {
            FlightScheduleRequestDTO flightScheduleRequestDTO = buildFlightScheduleRequestDTO();
            String result = flightScheduleController.addFlightSchedule(flightScheduleRequestDTO);
            postOperationSuccess(result);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to save flight schedule.");
        }
    }
    //****** [End : add] ***************

    //****** [Start : update] ***************
    private void updateFlightSchedule() {
        if (!showUpdateConfirmation()) {
            return;
        }

        Integer id = getSelectedFlightScheduleIdFromTable();
        if (id == null) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a flight schedule.");
            return;
        }

        if (!isInputFieldsValid()) {
            return;
        }

        try {
            performUpdate(id);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to update flight schedule.");
        }
    }

    private boolean showUpdateConfirmation() {
        return CommonMessageBoxUI.showOkCancelConfirmationMessageBox(
                this,
                "Are you sure you want to update this flight schedule?",
                "Confirm Update"
        );
    }

    private void performUpdate(Integer id) throws Exception {
        FlightScheduleRequestDTO flightScheduleRequestDTO = buildFlightScheduleRequestDTO();
        String result = flightScheduleController.updateFlightSchedule(id, flightScheduleRequestDTO);
        postOperationSuccess(result);
    }
    //****** [End : update] ***************

    //****** [Start : delete] ***************
    private void deleteFlightSchedule() {
        Integer id = getSelectedFlightScheduleIdFromTable();
        if (id == null) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a flight schedule to delete.");
            return;
        }

        if (!showDeleteConfirmation()) {
            return;
        }

        try {
            performDelete(id);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to delete flight schedule.");
        }
    }

    private boolean showDeleteConfirmation() {
        return CommonMessageBoxUI.showOkCancelConfirmationMessageBox(
                this,
                "Are you sure you want to delete this flight schedule? This action cannot be undone.",
                "Confirm Deletion"
        );
    }

    private void performDelete(Integer id) throws Exception {
        String result = flightScheduleController.deleteFlightSchedule(id);
        postOperationSuccess(result);
    }
    //****** [End : delete] ***************

    //****** [End : clear] ***************
    private void clearForm() {
        resetInputFields();
        resetSelectionState();
        resetComboBoxes();
        clearDaySelections();
        resetTableSelection();
    }

    public void clearDaySelections() { //reset
        selectedScheduleDaysSet.clear();
        for (JCheckBox checkBox : scheduleDayCheckboxes) {
            checkBox.setSelected(false);
        }
    }

    private void resetInputFields() {
        txt_shedule_code.setText("");
        txt_schedule_airline.setText("");
        txt_schedule_DepartureTime.setText("");
        txt_schedule_ArrivalTime.setText("");
    }

    private void resetSelectionState() {
        selectedRoute_Id = -1;
        selectedAircraftModel_Id = -1;
    }

    private void resetComboBoxes() {
        resetComboBox(comBox_aircraftModel);
        resetComboBox(comBox_route);
    }

    private void resetComboBox(JComboBox<String> comboBox) {
        comboBox.removeAllItems();
        comboBox.addItem("Select");
    }

    private void resetTableSelection() {
        tbl_flightSheduleList.clearSelection();
        setCrudButtonsVisibilityForTableSelection(false);
    }

    private void initializeUIState() {
        initCommonLabels();
        setupAllCheckboxes();
        setupTableSelectionListener();

        loadAllFlightSchedules();

        setComboBoxesHeaders(false);
        loadAllRoutes();
        loadAllAircraftModels();
    }

    private void postOperationSuccess(String message) {
        CommonMessageBoxUI.showOperationSuccessMessageBox(this, message);
        resetUIAfterOperation();
    }

    private void resetUIAfterOperation() {
        clearForm();
        initializeUIState();
    }
    //****** [End : clear] ***************

    //--------------------- [ End - btn handle] --------------------------------
}
