/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myapp.view.staff;

import java.awt.Cursor;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.util.List;
import myapp.controller.FlightController;
import myapp.dto.flight.FlightRequestDTO;
import myapp.dto.flight.FlightResponseDTO;
import myapp.dto.flightsGeneration.FlightsGenerationRequestDTO;
import myapp.util.audit.AuditUtil;
import myapp.util.commonTask.CommonTask;
import myapp.util.commonUI.CommonMessageBoxUI;
import myapp.util.commonUI.DateTimePickerUI;
import myapp.util.commonUI.PaginatedTableUI;
import myapp.view.LoginView;

/**
 *
 * @author HP
 */
public class FlightView extends javax.swing.JFrame {

    /**
     * Creates new form FlightView
     */
    private final FlightController flightController;
    private final String userName;
    private PaginatedTableUI<FlightResponseDTO> paginatedUI;

    public FlightView(String userName) {
        initComponents();
        this.userName = userName;

        flightController = new FlightController();

        clearForm();
        initializeUIState();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_flightList = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        lbl_copyright = new javax.swing.JLabel();
        txt_searchBar = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        btn_add = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        btn_back = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();
        lblId6 = new javax.swing.JLabel();
        lblId7 = new javax.swing.JLabel();
        txt_weekly_flight_assignment_ending_date = new javax.swing.JTextField();
        btn_departureDateTime = new javax.swing.JButton();
        btn_arrivalDateTime = new javax.swing.JButton();
        txt_weekly_flight_assignment_starting_date = new javax.swing.JTextField();
        btn_reset = new javax.swing.JButton();
        btn_tblPagList_next = new javax.swing.JButton();
        btn_tblPagList_prev = new javax.swing.JButton();
        lbl_logout = new javax.swing.JLabel();
        lbl_loggedUser = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tbl_flightList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_flightList.setFillsViewportHeight(true);
        jScrollPane1.setViewportView(tbl_flightList);

        jLabel2.setText("Airline Ticket Booking System");

        lbl_copyright.setText("@C");

        txt_searchBar.setText("Search here...");
        txt_searchBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_searchBarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_searchBarFocusLost(evt);
            }
        });
        txt_searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_searchBarKeyTyped(evt);
            }
        });

        btn_add.setLabel("Add");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myapp/resource/img/back-arrow.jpg"))); // NOI18N
        btn_back.setBorder(null);
        btn_back.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_back.setMaximumSize(new java.awt.Dimension(39, 16));
        btn_back.setMinimumSize(new java.awt.Dimension(39, 16));
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        lblTitle1.setBackground(new java.awt.Color(204, 204, 204));
        lblTitle1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("Flight Assignments for the Week");

        lblId6.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId6.setText("Starting Date of the week :");

        lblId7.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId7.setText("Ending Date of the week :");

        btn_departureDateTime.setText("...");
        btn_departureDateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_departureDateTimeActionPerformed(evt);
            }
        });

        btn_arrivalDateTime.setText("...");
        btn_arrivalDateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_arrivalDateTimeActionPerformed(evt);
            }
        });

        btn_reset.setText("Reset");
        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });

        btn_tblPagList_next.setText(">");
        btn_tblPagList_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_nextActionPerformed(evt);
            }
        });

        btn_tblPagList_prev.setText("<");
        btn_tblPagList_prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_prevActionPerformed(evt);
            }
        });

        lbl_logout.setForeground(new java.awt.Color(0, 51, 255));
        lbl_logout.setText("(logout)");
        lbl_logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_logoutMouseClicked(evt);
            }
        });

        lbl_loggedUser.setForeground(new java.awt.Color(0, 51, 255));
        lbl_loggedUser.setText("(username)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(lbl_logout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_loggedUser)
                .addGap(46, 46, 46))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lbl_copyright))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_reset)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_add))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblId6)
                                        .addGap(30, 30, 30)
                                        .addComponent(txt_weekly_flight_assignment_starting_date, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblId7)
                                        .addGap(33, 33, 33)
                                        .addComponent(txt_weekly_flight_assignment_ending_date)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_arrivalDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_departureDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_tblPagList_prev)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_tblPagList_next))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txt_searchBar)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_logout)
                    .addComponent(lbl_loggedUser, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId6)
                    .addComponent(txt_weekly_flight_assignment_starting_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_arrivalDateTime))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId7)
                    .addComponent(txt_weekly_flight_assignment_ending_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_departureDateTime))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_add)
                    .addComponent(btn_reset))
                .addGap(55, 55, 55)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_tblPagList_prev)
                    .addComponent(btn_tblPagList_next))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_copyright)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_searchBarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchBarFocusGained
        if (txt_searchBar.getText().equals("Search here ...")) {
            txt_searchBar.setText("");  // Clear the placeholder text when the user clicks on the field
        }
    }//GEN-LAST:event_txt_searchBarFocusGained

    private void txt_searchBarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchBarFocusLost
        if (txt_searchBar.getText().isEmpty()) {
            txt_searchBar.setText("Search here ...");  // Restore placeholder text if the user left the field empty
        }
    }//GEN-LAST:event_txt_searchBarFocusLost

    private void txt_searchBarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchBarKeyTyped
        handleSearch();
    }//GEN-LAST:event_txt_searchBarKeyTyped

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        addFlight();
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        CommonTask.switchView(this, new AdminDashboardView(this.userName));
    }//GEN-LAST:event_btn_backActionPerformed

    private void btn_arrivalDateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_arrivalDateTimeActionPerformed
        LocalDate selectedDate = DateTimePickerUI.showDatePickerDialog("Select starting Date of the week");
        if (selectedDate != null) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            txt_weekly_flight_assignment_starting_date.setText(selectedDate.format(formatter));
        }
    }//GEN-LAST:event_btn_arrivalDateTimeActionPerformed

    private void btn_departureDateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_departureDateTimeActionPerformed
        LocalDate selectedDate = DateTimePickerUI.showDatePickerDialog("Select ending Date of the week :");
        if (selectedDate != null) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            txt_weekly_flight_assignment_ending_date.setText(selectedDate.format(formatter));
        }
    }//GEN-LAST:event_btn_departureDateTimeActionPerformed

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed
        resetUIAfterOperation();
    }//GEN-LAST:event_btn_resetActionPerformed

    private void btn_tblPagList_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_nextActionPerformed
        if (paginatedUI != null) {
            paginatedUI.nextPage();
        }
    }//GEN-LAST:event_btn_tblPagList_nextActionPerformed

    private void btn_tblPagList_prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_prevActionPerformed
        if (paginatedUI != null) {
            paginatedUI.previousPage();
        }
    }//GEN-LAST:event_btn_tblPagList_prevActionPerformed

    private void lbl_logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_logoutMouseClicked
        CommonTask.switchView(this, new LoginView());
    }//GEN-LAST:event_lbl_logoutMouseClicked

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FlightView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FlightView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FlightView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FlightView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new FlightView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_arrivalDateTime;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_departureDateTime;
    private javax.swing.JButton btn_reset;
    private javax.swing.JButton btn_tblPagList_next;
    private javax.swing.JButton btn_tblPagList_prev;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblId6;
    private javax.swing.JLabel lblId7;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lbl_copyright;
    private javax.swing.JLabel lbl_loggedUser;
    private javax.swing.JLabel lbl_logout;
    private javax.swing.JTable tbl_flightList;
    private javax.swing.JTextField txt_searchBar;
    private javax.swing.JTextField txt_weekly_flight_assignment_ending_date;
    private javax.swing.JTextField txt_weekly_flight_assignment_starting_date;
    // End of variables declaration//GEN-END:variables

    //--------------------- [ Start - btn handle] ------------------------------
    private void initCommonLabels() {
        lbl_loggedUser.setText("( " + this.userName + " )");
        lbl_logout.setText("<html><u>(Logout)</u></html>");
        lbl_logout.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        lbl_copyright.setText("@Dannoruwa-Anush 2025");
    }

    //-------------------||||||| Start : input field validation |||||||---------
    private boolean isInputFieldsValid() {
        return isScheduleValid();
    }

    private boolean isScheduleValid() {
        String startingDateStr = txt_weekly_flight_assignment_starting_date.getText().trim();
        String endingDateStr = txt_weekly_flight_assignment_ending_date.getText().trim();

        // Check for empty fields
        if (startingDateStr.isEmpty() || endingDateStr.isEmpty()) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Both starting and ending dates must be selected.");
            return false;
        }

        try {
            LocalDate startingDate = stringToLocalDate(startingDateStr);
            LocalDate endingDate = stringToLocalDate(endingDateStr);

            // Check that ending date is after starting date
            if (!endingDate.isAfter(startingDate)) {
                CommonMessageBoxUI.showOperationFailMessageBox(this, "Ending date must be after the starting date.");
                return false;
            }

            // Check that the gap is exactly 6 days
            long daysBetween = ChronoUnit.DAYS.between(startingDate, endingDate);
            if (daysBetween != 6) {
                CommonMessageBoxUI.showOperationFailMessageBox(this, "The schedule must be exactly one week (6 days gap).");
                return false;
            }

        } catch (DateTimeParseException e) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Invalid date format. Please use yyyy-MM-dd.");
            return false;
        }

        return true;
    }

    //helper method string -> loacal date
    private LocalDate stringToLocalDate(String dateStr) throws DateTimeParseException {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        return LocalDate.parse(dateStr, formatter);
    }
    //-------------------||||||| End : input field validation |||||||-----------
    
    
    //-------------------||||||| Start : load for table |||||| -----------------
    private void loadFlightsIntoTable(List<FlightResponseDTO> flights) {
        String[] columns = {"flight_Id", "No", "Code", "Route Info", "Aircraft Info", "Departure Time", "Arrival Time", "Airline"};

        paginatedUI = new PaginatedTableUI<>(
                tbl_flightList,
                columns,
                // pass a function (lambda) | This function will take single 'ObjResponseDTO' object into a String array
                flight -> new String[]{
                    String.valueOf(flight.getFlight_id()),
                    String.valueOf(flights.indexOf(flight) + 1),
                    flight.getFlight_code(),
                    flight.getRoute().getRouteInfo(),
                    flight.getAircraftModel().getAircraftModelInfo(),
                    String.valueOf(flight.getFlight_departure_time()),
                    String.valueOf(flight.getFlight_arrival_time()),
                    flight.getFlight_airline_name()
                },
                10 //page size
        );

        paginatedUI.setData(flights);

        // Set widths for visible columns
        tbl_flightList.getColumnModel().getColumn(2).setPreferredWidth(60);   // Code
        tbl_flightList.getColumnModel().getColumn(3).setPreferredWidth(200);  // Route Info
        tbl_flightList.getColumnModel().getColumn(4).setPreferredWidth(120);  // Aircraft Info
        tbl_flightList.getColumnModel().getColumn(5).setPreferredWidth(120);  // Departure Time
        tbl_flightList.getColumnModel().getColumn(6).setPreferredWidth(120);  // Arrival Time
        tbl_flightList.getColumnModel().getColumn(7).setPreferredWidth(100);  // Airline
    }

    private void loadAllFlights() {
        try {
            List<FlightResponseDTO> flights = flightController.getAllFlights();
            loadFlightsIntoTable(flights);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to load flights.");
        }
    }

    private void loadAllSearchKeyMatchFlights(String searchKey) {
        try {
            List<FlightResponseDTO> flights = flightController.getAllFlightsBySearchKey(searchKey);
            loadFlightsIntoTable(flights);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to load search results.");
        }
    }

    private void handleSearch() {
        String searchKey = txt_searchBar.getText().trim();
        if (!searchKey.isEmpty()) {
            loadAllSearchKeyMatchFlights(searchKey);
        } else {
            loadAllFlights();
        }
    }

    //-------------------||||||| End : load for table |||||| -------------------
    private FlightsGenerationRequestDTO buildFlightsGenerationRequestDTO() {
        return new FlightsGenerationRequestDTO(
                stringToLocalDate(txt_weekly_flight_assignment_starting_date.getText().trim()),
                stringToLocalDate(txt_weekly_flight_assignment_ending_date.getText().trim())
        );
    }

    //****** [Start : add] ***************
    private void addFlight() {
        if (!showAddConfirmation()) {
            return;
        }

        if (!isInputFieldsValid()) {
            return;
        }

        try {
            FlightsGenerationRequestDTO flightsGenerationRequestDTO = buildFlightsGenerationRequestDTO();
            String result = flightController.generateFlightsForWeek(flightsGenerationRequestDTO);
            postOperationSuccess(result);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to save flight.");
        }
    }

    private boolean showAddConfirmation() {
        return CommonMessageBoxUI.showOkCancelConfirmationMessageBox(
                this,
                "Are you sure you want to add flight for selected week? This action cannot be undone.",
                "Confirm Add"
        );
    }
    //****** [End : add] ***************

    //****** [End : clear] ***************
    private void clearForm() {
        resetInputFields();
    }

    private void resetInputFields() {
        txt_weekly_flight_assignment_ending_date.setText("");
        txt_weekly_flight_assignment_starting_date.setText("");
    }

    private void initializeUIState() {
        initCommonLabels();

        loadAllFlights();
    }

    private void postOperationSuccess(String message) {
        CommonMessageBoxUI.showOperationSuccessMessageBox(this, message);
        resetUIAfterOperation();
    }

    private void resetUIAfterOperation() {
        clearForm();
        initializeUIState();
    }
    //****** [End : clear] ***************

    //--------------------- [ End - btn handle] --------------------------------
}
