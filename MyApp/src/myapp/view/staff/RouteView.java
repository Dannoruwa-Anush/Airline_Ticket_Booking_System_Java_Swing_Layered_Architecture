/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myapp.view.staff;

import java.awt.Cursor;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JComboBox;
import myapp.controller.AirportController;
import myapp.controller.RouteController;
import myapp.dto.airport.AirportResponseDTO;
import myapp.dto.route.RouteRequestDTO;
import myapp.dto.route.RouteResponseDTO;
import myapp.util.audit.AuditUtil;
import myapp.util.commonTask.CommonTask;
import myapp.util.commonUI.CommonMessageBoxUI;
import myapp.util.commonUI.PaginatedTableUI;
import myapp.util.formValidation.FormValidationUtil;
import myapp.view.LoginView;

/**
 *
 * @author HP
 */
public class RouteView extends javax.swing.JFrame {

    /**
     * Creates new form RouteView
     */
    private final RouteController routeController;
    private final AirportController airportController; //to get all airports
    private final String userName;
    private PaginatedTableUI<RouteResponseDTO> paginatedUI;
    
    private Map<String, AirportResponseDTO> originAirportMap; // Map to store airport_name -> AirportResponseDTO
    private Map<String, AirportResponseDTO> destinationAirportMap; // Map to store airport_name -> AirportResponseDTO
    private int selectedOriginAirportId;
    private int selectedDestinationAirportId;

    public RouteView(String userName) {
        initComponents();
        this.userName = userName;
        
        airportController = new AirportController();
        routeController = new RouteController();

        originAirportMap = new HashMap<>();
        destinationAirportMap = new HashMap<>();
        
        clearForm();
        initializeUIState();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_back = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();
        lbl_logout = new javax.swing.JLabel();
        lbl_loggedUser = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        txt_duration_min = new javax.swing.JTextField();
        lblId3 = new javax.swing.JLabel();
        txt_distance_km = new javax.swing.JTextField();
        lblId2 = new javax.swing.JLabel();
        lblId4 = new javax.swing.JLabel();
        lblId5 = new javax.swing.JLabel();
        comBox_destinationAirport = new javax.swing.JComboBox<>();
        comBox_originAirport = new javax.swing.JComboBox<>();
        jSeparator3 = new javax.swing.JSeparator();
        txt_searchBar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_routeList = new javax.swing.JTable();
        btn_add = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_reset = new javax.swing.JButton();
        btn_tblPagList_next = new javax.swing.JButton();
        btn_tblPagList_prev = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        lbl_copyright = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btn_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myapp/resource/img/back-arrow.jpg"))); // NOI18N
        btn_back.setBorder(null);
        btn_back.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_back.setMaximumSize(new java.awt.Dimension(39, 16));
        btn_back.setMinimumSize(new java.awt.Dimension(39, 16));
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        lblTitle1.setBackground(new java.awt.Color(204, 204, 204));
        lblTitle1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("Route ");

        lbl_logout.setForeground(new java.awt.Color(0, 51, 255));
        lbl_logout.setText("(logout)");
        lbl_logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_logoutMouseClicked(evt);
            }
        });

        lbl_loggedUser.setForeground(new java.awt.Color(0, 51, 255));
        lbl_loggedUser.setText("(username)");

        lblId3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId3.setText("Duration (min) :");

        lblId2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId2.setText("Distance (Km) : ");

        lblId4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId4.setText("Orgin Airport :");

        lblId5.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId5.setText("Destination Airport :");

        comBox_destinationAirport.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comBox_destinationAirport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comBox_destinationAirportActionPerformed(evt);
            }
        });

        comBox_originAirport.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comBox_originAirport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comBox_originAirportActionPerformed(evt);
            }
        });

        txt_searchBar.setText("Search here...");
        txt_searchBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_searchBarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_searchBarFocusLost(evt);
            }
        });
        txt_searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_searchBarKeyTyped(evt);
            }
        });

        tbl_routeList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_routeList.setFillsViewportHeight(true);
        tbl_routeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_routeListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_routeList);

        btn_add.setLabel("Add");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_update.setLabel("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_delete.setLabel("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_reset.setText("Reset");
        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });

        btn_tblPagList_next.setText(">");
        btn_tblPagList_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_nextActionPerformed(evt);
            }
        });

        btn_tblPagList_prev.setText("<");
        btn_tblPagList_prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_prevActionPerformed(evt);
            }
        });

        jLabel2.setText("Airline Ticket Booking System");

        lbl_copyright.setText("@C");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(lbl_logout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_loggedUser)
                .addGap(101, 101, 101))
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addComponent(jSeparator4)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(24, 24, 24)
                            .addComponent(lblTitle1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(75, 75, 75))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap(24, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txt_searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btn_tblPagList_prev)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_tblPagList_next))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(34, 34, 34)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btn_add)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_reset)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_update)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_delete))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(lblId2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblId4)
                                            .addGap(18, 18, 18)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txt_distance_km)
                                        .addComponent(comBox_originAirport, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblId5)
                                            .addGap(12, 12, 12)
                                            .addComponent(comBox_destinationAirport, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblId3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txt_duration_min, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(222, 222, 222)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lbl_copyright)))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_logout)
                    .addComponent(lbl_loggedUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_duration_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_distance_km, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblId2)
                    .addComponent(lblId3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId4)
                    .addComponent(comBox_originAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblId5)
                    .addComponent(comBox_destinationAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_add)
                    .addComponent(btn_update)
                    .addComponent(btn_delete)
                    .addComponent(btn_reset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_tblPagList_prev)
                    .addComponent(btn_tblPagList_next))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_copyright)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        CommonTask.switchView(this, new AdminDashboardView(this.userName));
    }//GEN-LAST:event_btn_backActionPerformed

    private void lbl_logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_logoutMouseClicked
        CommonTask.switchView(this, new LoginView());
    }//GEN-LAST:event_lbl_logoutMouseClicked

    private void txt_searchBarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchBarFocusGained
        if (txt_searchBar.getText().equals("Search here ...")) {
            txt_searchBar.setText("");  // Clear the placeholder text when the user clicks on the field
        }
    }//GEN-LAST:event_txt_searchBarFocusGained

    private void txt_searchBarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchBarFocusLost
        if (txt_searchBar.getText().isEmpty()) {
            txt_searchBar.setText("Search here ...");  // Restore placeholder text if the user left the field empty
        }
    }//GEN-LAST:event_txt_searchBarFocusLost

    private void txt_searchBarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchBarKeyTyped
        handleSearch();
    }//GEN-LAST:event_txt_searchBarKeyTyped

    private void tbl_routeListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_routeListMouseClicked
        getSelectedRow();
    }//GEN-LAST:event_tbl_routeListMouseClicked

    private void comBox_originAirportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comBox_originAirportActionPerformed
        String selectedOriginAirportName = (String) comBox_originAirport.getSelectedItem();
        if (selectedOriginAirportName != null) {
            AirportResponseDTO selectedOriginAirport = originAirportMap.get(selectedOriginAirportName);

            if (selectedOriginAirport != null) {
                selectedOriginAirportId = selectedOriginAirport.getAirport_id(); // Store selected origin airport ID
                //System.out.println("Selected O Airport ID: " + selectedOriginAirportId);
            }
        }
    }//GEN-LAST:event_comBox_originAirportActionPerformed

    private void comBox_destinationAirportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comBox_destinationAirportActionPerformed
        String selectedDestinationAirportName = (String) comBox_destinationAirport.getSelectedItem();
        if (selectedDestinationAirportName != null) {
            AirportResponseDTO selectedDestinationAirport = destinationAirportMap.get(selectedDestinationAirportName);

            if (selectedDestinationAirport != null) {
                selectedDestinationAirportId = selectedDestinationAirport.getAirport_id(); // Store selected destination airport ID
                //System.out.println("Selected D Airport ID: " + selectedDestinationAirportId);
            }
        }
    }//GEN-LAST:event_comBox_destinationAirportActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        addRoute();
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        updateRoute();
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        deleteRoute();
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed
        resetUIAfterOperation();
    }//GEN-LAST:event_btn_resetActionPerformed

    private void btn_tblPagList_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_nextActionPerformed
        if (paginatedUI != null) {
            paginatedUI.nextPage();
        }
    }//GEN-LAST:event_btn_tblPagList_nextActionPerformed

    private void btn_tblPagList_prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_prevActionPerformed
        if (paginatedUI != null) {
            paginatedUI.previousPage();
        }
    }//GEN-LAST:event_btn_tblPagList_prevActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(RouteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(RouteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(RouteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(RouteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new RouteView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_reset;
    private javax.swing.JButton btn_tblPagList_next;
    private javax.swing.JButton btn_tblPagList_prev;
    private javax.swing.JButton btn_update;
    private javax.swing.JComboBox<String> comBox_destinationAirport;
    private javax.swing.JComboBox<String> comBox_originAirport;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lblId2;
    private javax.swing.JLabel lblId3;
    private javax.swing.JLabel lblId4;
    private javax.swing.JLabel lblId5;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lbl_copyright;
    private javax.swing.JLabel lbl_loggedUser;
    private javax.swing.JLabel lbl_logout;
    private javax.swing.JTable tbl_routeList;
    private javax.swing.JTextField txt_distance_km;
    private javax.swing.JTextField txt_duration_min;
    private javax.swing.JTextField txt_searchBar;
    // End of variables declaration//GEN-END:variables

    //------------ [ Start - btn handle] -------------
    private void initCommonLabels() {
        lbl_loggedUser.setText("( " + this.userName + " )");
        lbl_logout.setText("<html><u>(Logout)</u></html>");
        lbl_logout.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        lbl_copyright.setText("@Dannoruwa-Anush 2025");
    }

    //-------------------||||||| Start : input field validation |||||||-----------
    private boolean isInputFieldsValid() {
        return isDistanceValid() && isDurationValid() && isOriginAirportSelectionValid() && isDestinationAirportSelectionValid() && isRouteValid();
    }

    private boolean isDistanceValid() {
        String distanceText = txt_distance_km.getText();
        try {
            BigDecimal distance = new BigDecimal(distanceText).setScale(2, RoundingMode.HALF_UP);

            if (distance.compareTo(BigDecimal.ZERO) <= 0) {
                CommonMessageBoxUI.showOperationFailMessageBox(this, "Distance must be greater than 0.");
                return false;
            }

            if (distance.scale() != 2) {
                CommonMessageBoxUI.showOperationFailMessageBox(this, "Distance must have exactly two decimal places.");
                return false;
            }

        } catch (NumberFormatException ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please enter a valid number for distance.");
            return false;
        }
        return true;
    }

    private boolean isOriginAirportSelectionValid() {
        if (!FormValidationUtil.isIdSelectionValid(selectedOriginAirportId)) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select an origin airport");
            return false;
        }
        return true;
    }

    private boolean isDestinationAirportSelectionValid() {
        if (!FormValidationUtil.isIdSelectionValid(selectedDestinationAirportId)) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a destination airport");
            return false;
        }
        return true;
    }

    private boolean isRouteValid() {
        if (selectedOriginAirportId == selectedDestinationAirportId) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Origin and destination airport should be distinct");
            return false;
        }
        return true;
    }

    private boolean isDurationValid() {
        String durationText = txt_duration_min.getText();
        try {
            int duration = Integer.parseInt(durationText);

            if (duration <= 0) {
                CommonMessageBoxUI.showOperationFailMessageBox(this, "Duration must be positive");
                return false;
            }
        } catch (NumberFormatException ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please enter a valid number for duration");
            return false;
        }
        return true;
    }
    //-------------------||||||| End : input field validation |||||||-----------

    //-------------------||||||| Start : load for comBox |||||| ----------------
    private void loadAllAirports() {
        try {
            List<AirportResponseDTO> airports = airportController.getAllAirports();
            loadAirportsIntoComboBoxes(airports);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    private void loadAirportsIntoComboBoxes(List<AirportResponseDTO> airports) {
        // Loop through the list of airports and add them to both combo boxes
        for (AirportResponseDTO airport : airports) {
            comBox_originAirport.addItem(airport.getAirport_name()); // Add only the airport_name
            originAirportMap.put(airport.getAirport_name(), airport); // Store the full object in the map

            comBox_destinationAirport.addItem(airport.getAirport_name()); // Add only the airport_name
            destinationAirportMap.put(airport.getAirport_name(), airport); // Store the full object in the map
        }
    }

    //Note : Object... args is a varargs(Variable Arguments) parameter
    private void setComboBoxesHeaders(boolean isUpdate, Object... args) {
        comBox_originAirport.removeAllItems();
        comBox_destinationAirport.removeAllItems();

        if (isUpdate) {
            // Check if args is not empty and contains expected types
            if (args.length >= 2 && args[0] instanceof String && args[1] instanceof String) {
                String originAirportName = (String) args[0];
                String destinationAirportName = (String) args[1];

                comBox_originAirport.addItem(originAirportName);
                comBox_destinationAirport.addItem(destinationAirportName);
            } else {
                // Handle error or invalid input scenario
                System.out.println("Invalid arguments passed for airport names.");
            }
        } else {
            comBox_originAirport.addItem("Select");
            comBox_destinationAirport.addItem("Select");
        }
    }
    //-------------------||||||| End : load for comBox |||||| ------------------ 

    //-------------------||||||| Start : load for table |||||| -----------------
    private void getSelectedRow() {
        Integer id = getSelectedRouteIdFromTable();
        if (id == null) {
            return;
        }

        try {
            RouteResponseDTO routeDTO = routeController.getRouteById(id);
            if (routeDTO != null) {
                txt_distance_km.setText(String.valueOf(routeDTO.getRoute_distance_km()));
                txt_duration_min.setText(String.valueOf(routeDTO.getRoute_estimated_duration_minutes()));
                selectedOriginAirportId = routeDTO.getOriginAirport().getAirport_id();
                selectedDestinationAirportId = routeDTO.getDestinationAirport().getAirport_id();

                setComboBoxesHeaders(true, routeDTO.getOriginAirport().getAirport_name(), routeDTO.getDestinationAirport().getAirport_name());
                loadAllAirports();
            } else {
                CommonMessageBoxUI.showOperationFailMessageBox(this, "Route not found");
            }
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Error loading route.");
        }
    }

    private Integer getSelectedRouteIdFromTable() {
        int selectedRow = tbl_routeList.getSelectedRow();
        if (selectedRow == -1) {
            return null;
        }

        Object idObj = tbl_routeList.getValueAt(selectedRow, 0);
        if (idObj == null || idObj.toString().isBlank()) {
            return null;
        }

        try {
            return Integer.valueOf(idObj.toString());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private void loadRoutesIntoTable(List<RouteResponseDTO> routes) {
        String[] columns = {"route_Id", "No", "Origin Airport", "Destination Airport", "Distance (Km)", "Duration (min)"};

        
        paginatedUI = new PaginatedTableUI<>(
                tbl_routeList,
                columns,
                
                // pass a function (lambda) | This function will take single 'ObjResponseDTO' object into a String array
                route -> new String[]{
                    String.valueOf(route.getRoute_id()),
                    String.valueOf(routes.indexOf(route) + 1),
                    route.getOriginAirport().getAirport_name(),
                    route.getDestinationAirport().getAirport_name(),
                    String.valueOf(route.getRoute_distance_km()),
                    String.valueOf(route.getRoute_estimated_duration_minutes())
                },
                10 //page size
        );

        paginatedUI.setData(routes);
    }

    private void loadAllRoutes() {
        try {
            List<RouteResponseDTO> routes = routeController.getAllRoutes();
            loadRoutesIntoTable(routes);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to load routes.");
        }
    }

    private void loadAllSearchKeyMatchRoutes(String searchKey) {
        try {
            List<RouteResponseDTO> roles = routeController.getAllRoutesBySearchKey(searchKey);
            loadRoutesIntoTable(roles);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to load search results.");
        }
    }

    private void handleSearch() {
        String searchKey = txt_searchBar.getText().trim();
        if (!searchKey.isEmpty()) {
            loadAllSearchKeyMatchRoutes(searchKey);
        } else {
            loadAllRoutes();
        }
    }
    //-------------------||||||| End : load for table |||||| -------------------

    private void setupTableSelectionListener() {
        tbl_routeList.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                handleCRUDButtonsState();
            }
        });
    }

    private void handleCRUDButtonsState() {
        int selectedRow = tbl_routeList.getSelectedRow();
        boolean isRowSelected = (selectedRow != -1);
        setCrudButtonsVisibilityForTableSelection(isRowSelected);
    }

    private void setCrudButtonsVisibilityForTableSelection(boolean isSelected) {
        btn_add.setVisible(!isSelected); // hide add when row selected
        btn_update.setVisible(isSelected);
        btn_delete.setVisible(isSelected);
        btn_reset.setVisible(isSelected);
    }

    private RouteRequestDTO buildRouteRequestDTO() {
        return new RouteRequestDTO(
                selectedOriginAirportId,
                selectedDestinationAirportId,
                new BigDecimal(txt_distance_km.getText()).setScale(2, RoundingMode.HALF_UP),
                Integer.parseInt(txt_duration_min.getText())
        );
    }

    //****** [Start : add] ***************
    private void addRoute() {
        if (!isInputFieldsValid()) {
            return;
        }

        try {
            RouteRequestDTO routeRequestDTO = buildRouteRequestDTO();
            String result = routeController.addRoute(routeRequestDTO);
            postOperationSuccess(result);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to save route.");
        }
    }
    //****** [End : add] ***************

    //****** [Start : update] ***************
    private void updateRoute() {
        if (!showUpdateConfirmation()) {
            return;
        }

        Integer id = getSelectedRouteIdFromTable();

        if (id == null) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a route.");
            return;
        }

        if (!isInputFieldsValid()) {
            return;
        }

        try {
            performUpdate(id);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to update route.");
        }
    }

    private boolean showUpdateConfirmation() {
        return CommonMessageBoxUI.showOkCancelConfirmationMessageBox(
                this,
                "Are you sure you want to update this route?",
                "Confirm Update"
        );
    }

    private void performUpdate(Integer id) throws Exception {
        RouteRequestDTO routeRequestDTO = buildRouteRequestDTO();
        String result = routeController.updateRoute(id, routeRequestDTO);
        postOperationSuccess(result);
    }
    //****** [End : update] ***************

    //****** [Start : delete] ***************
    private void deleteRoute() {
        Integer id = getSelectedRouteIdFromTable();
        if (id == null) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a route to delete.");
            return;
        }

        if (!showDeleteConfirmation()) {
            return;
        }

        try {
            performDelete(id);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to delete route.");
        }
    }

    private boolean showDeleteConfirmation() {
        return CommonMessageBoxUI.showOkCancelConfirmationMessageBox(
                this,
                "Are you sure you want to delete this route? This action cannot be undone.",
                "Confirm Deletion"
        );
    }

    private void performDelete(Integer id) throws Exception {
        String result = routeController.deleteRoute(id);
        postOperationSuccess(result);
    }
    //****** [End : delete] ***************

    
    //****** [Start : Reset] ***************
    private void clearForm() {
        resetInputFields();
        resetSelectionState();
        resetComboBoxes();
        resetTableSelection();
    }

    private void resetInputFields() {
        txt_distance_km.setText("");
        txt_duration_min.setText("");
    }

    private void resetSelectionState() {
        selectedOriginAirportId = -1;
        selectedDestinationAirportId = -1;
    }

    private void resetComboBoxes() {
        resetComboBox(comBox_originAirport);
        resetComboBox(comBox_destinationAirport);
    }

    private void resetComboBox(JComboBox<String> comboBox) {
        comboBox.removeAllItems();
        comboBox.addItem("Select");
    }

    private void resetTableSelection() {
        tbl_routeList.clearSelection();
        setCrudButtonsVisibilityForTableSelection(false);
    }

    private void initializeUIState() {
        initCommonLabels();
        setupTableSelectionListener();

        loadAllRoutes();
        setComboBoxesHeaders(false);
        loadAllAirports();
    }

    private void postOperationSuccess(String message) {
        CommonMessageBoxUI.showOperationSuccessMessageBox(this, message);
        resetUIAfterOperation();
    }

    private void resetUIAfterOperation() {
        clearForm();
        initializeUIState();
    }
    //****** [End : Reset] ***************

    //------------ [ End - btn handle] ---------------
}
