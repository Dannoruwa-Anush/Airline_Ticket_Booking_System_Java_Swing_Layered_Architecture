/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myapp.view.user;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import myapp.controller.FlightClassPriceController;
import myapp.controller.FlightController;
import myapp.controller.ReservationController;
import myapp.dto.reservation.ReservationRequestDTO;
import myapp.dto.flight.FlightResponseDTO;
import myapp.dto.flightClassPrice.FlightClassPriceResponseDTO;
import myapp.dto.reservation.ReservationTabInteractionDTO;
import myapp.entity.compositeKey.FlightBookingClassCompKey;
import myapp.util.audit.AuditUtil;
import myapp.util.commonTask.CommonTask;
import myapp.util.commonUI.CommonMessageBoxUI;
import myapp.util.commonUI.TableWithNonSelectableRedHighlightedRowUI;
import myapp.util.commonUI.PaginatedTableUI;
import myapp.util.formValidation.FormValidationUtil;

/**
 *
 * @author HP
 */
public class ReservationFlightClassPriceTabView extends javax.swing.JFrame {

    /**
     * Creates new form BookingView
     */
    private final String userName;
    private ReservationTabInteractionDTO reservationTabInteractionDTO;
    private final int userId;
    private PaginatedTableUI<FlightClassPriceResponseDTO> paginatedUI;

    private final FlightClassPriceController flightClassPriceController;
    private final FlightController flightController;
    private final ReservationController reservationController;

    //private int selectedBookingClass_Id;
    //private BigDecimal basePriceOfselectedFlightClassPrice;
    public ReservationFlightClassPriceTabView(String userName, int userId, ReservationTabInteractionDTO reservationTabInteractionDTO) {
        initComponents();

        this.userName = userName;
        this.reservationTabInteractionDTO = reservationTabInteractionDTO;
        this.userId = userId;

        reservationController = new ReservationController();
        flightClassPriceController = new FlightClassPriceController();
        flightController = new FlightController();

        clearForm();
        initializeUIState();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle1 = new javax.swing.JLabel();
        lbl_loggedUser = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_classPriceList = new javax.swing.JTable();
        btn_reset = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        lbl_copyright = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txt_flightInfo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_departureDateAndTime = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txt_routeInfo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btn_bookNow = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();
        btn_tblPagList_prev = new javax.swing.JButton();
        btn_tblPagList_next = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        lblTitle1.setBackground(new java.awt.Color(204, 204, 204));
        lblTitle1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("Booking - Pricing");

        lbl_loggedUser.setForeground(new java.awt.Color(0, 51, 255));
        lbl_loggedUser.setText("(username)");

        tbl_classPriceList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_classPriceList.setFillsViewportHeight(true);
        tbl_classPriceList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_classPriceListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_classPriceList);

        btn_reset.setText("Reset");
        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });

        jLabel2.setText("Airline Ticket Booking System");

        lbl_copyright.setText("@C");

        jLabel1.setText("Flight Info :");

        txt_flightInfo.setEditable(false);

        jLabel4.setText("Departure Date & Time:");

        txt_departureDateAndTime.setEditable(false);

        jLabel5.setText("Route Info :");

        txt_routeInfo.setEditable(false);

        jLabel6.setText("Our Services and Pricing :");

        btn_bookNow.setText("Book Now");
        btn_bookNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_bookNowActionPerformed(evt);
            }
        });

        btn_cancel.setText("Cancel");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        btn_tblPagList_prev.setText("<");
        btn_tblPagList_prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_prevActionPerformed(evt);
            }
        });

        btn_tblPagList_next.setText(">");
        btn_tblPagList_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbl_copyright)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSeparator1)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_loggedUser, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel5))
                                    .addGap(28, 28, 28)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txt_routeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txt_flightInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txt_departureDateAndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_tblPagList_prev)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_tblPagList_next))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btn_cancel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_reset)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_bookNow))))))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(lbl_loggedUser)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(txt_flightInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4))
                    .addComponent(txt_departureDateAndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5))
                    .addComponent(txt_routeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_tblPagList_prev)
                    .addComponent(btn_tblPagList_next))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_reset)
                    .addComponent(btn_bookNow)
                    .addComponent(btn_cancel))
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_copyright)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbl_classPriceListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_classPriceListMouseClicked
        getSelectedRow();
    }//GEN-LAST:event_tbl_classPriceListMouseClicked

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed
        resetUIAfterOperation();
    }//GEN-LAST:event_btn_resetActionPerformed

    private void btn_bookNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_bookNowActionPerformed
        proceedBooking();
    }//GEN-LAST:event_btn_bookNowActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        cancelBooking();
    }//GEN-LAST:event_btn_cancelActionPerformed

    private void btn_tblPagList_prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_prevActionPerformed
        if (paginatedUI != null) {
            paginatedUI.previousPage();
        }
    }//GEN-LAST:event_btn_tblPagList_prevActionPerformed

    private void btn_tblPagList_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_nextActionPerformed
        if (paginatedUI != null) {
            paginatedUI.nextPage();
        }
    }//GEN-LAST:event_btn_tblPagList_nextActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(BookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(BookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(BookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(BookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new BookingView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_bookNow;
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_reset;
    private javax.swing.JButton btn_tblPagList_next;
    private javax.swing.JButton btn_tblPagList_prev;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lbl_copyright;
    private javax.swing.JLabel lbl_loggedUser;
    private javax.swing.JTable tbl_classPriceList;
    private javax.swing.JTextField txt_departureDateAndTime;
    private javax.swing.JTextField txt_flightInfo;
    private javax.swing.JTextField txt_routeInfo;
    // End of variables declaration//GEN-END:variables

    //--------------------- [ Start - btn handle] ------------------------------
    private void initCommonLabels() {
        lbl_loggedUser.setText("( " + this.userName + " )");
        lbl_copyright.setText("@Dannoruwa-Anush 2025");
    }

    private void loadSelectedFlightInfo() {
        if (!isBookingPreConditionsValid()) {
            return;
        }

        try {
            FlightResponseDTO flight = flightController.getFlightById(this.reservationTabInteractionDTO.getFlightId());
            loadFlightInfoToNonEditableTxtFields(flight);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    private void loadFlightInfoToNonEditableTxtFields(FlightResponseDTO flight) {
        txt_flightInfo.setText(flight.getFlightInfo());
        txt_departureDateAndTime.setText(FromLocalTimeToStringConversion(flight.getFlight_departure_time()));
        txt_routeInfo.setText(flight.getRoute().getRouteInfo());
    }

    private String FromLocalTimeToStringConversion(LocalDateTime dateTime) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        return dateTime.format(formatter);
    }

    //-------------------||||||| Start : input field validation |||||||---------
    private boolean isInputFieldsValid() {
        return isBookingPreConditionsValid() && isBookingPostConditionsValid();
    }

    private boolean isBookingPreConditionsValid() {
        if (!FormValidationUtil.isIdSelectionValid(this.reservationTabInteractionDTO.getPassengerId()) && !FormValidationUtil.isIdSelectionValid(this.reservationTabInteractionDTO.getFlightId()) && !FormValidationUtil.isValidTxtField(this.reservationTabInteractionDTO.getFlightCode())) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "The necessary preconditions have not been met.");
            return false;
        }
        return true;
    }

    private boolean isBookingPostConditionsValid() {
        return isBookingClassIdSettingValid() && isBookingClassNameSettingValid() && isBookingAvailableSeatCountSettingValid() && isBookingBasePriceSettingValid();
    }

    private boolean isBookingClassIdSettingValid() {
        if (!FormValidationUtil.isIdSelectionValid(this.reservationTabInteractionDTO.getBookingClassId())) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a booking class");
            return false;
        }
        return true;
    }

    private boolean isBookingClassNameSettingValid() {
        if (!FormValidationUtil.isValidTxtField(this.reservationTabInteractionDTO.getBookingClassName())) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a booking class");
            return false;
        }
        return true;
    }

    private boolean isBookingAvailableSeatCountSettingValid() {
        if (!FormValidationUtil.isIdSelectionValid(this.reservationTabInteractionDTO.getAvailableSeatCount())) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a booking class");
            return false;
        }
        return true;
    }

    private boolean isBookingBasePriceSettingValid() {
        if (this.reservationTabInteractionDTO.getTotalPrice() == null || this.reservationTabInteractionDTO.getTotalPrice().compareTo(BigDecimal.ZERO) <= 0) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Invalid base price. Please select a valid booking class with a non-zero price.");
            return false;
        }
        return true;
    }
    //-------------------||||||| End : input field validation |||||||-----------

    //-------------------||||||| Start : load for table |||||| -----------------
    private void loadFlightClassPricesIntoTable(List<FlightClassPriceResponseDTO> classPrices) {
        String[] columns = {"comp_Id", "No", "Class", "Price(Rs.)", "Available Seats"};

        paginatedUI = new PaginatedTableUI<>(
                tbl_classPriceList,
                columns,
                // pass a function (lambda) | This function will take single 'ObjResponseDTO' object into a String array
                classPrice -> new String[]{
                    //********
                    // composite FK store in format: "flightId-bookingClassId"
                    classPrice.getFlight().getFlight_id() + "-" + classPrice.getBookingClass().getBookingClass_id(),
                    //********
                    String.valueOf(classPrices.indexOf(classPrice) + 1),
                    classPrice.getBookingClass().getBookingClass_name(),
                    String.valueOf(classPrice.getBase_price()),
                    String.valueOf(classPrice.getSeat_capacity())
                },
                10 //page size
        );

        paginatedUI.setData(classPrices);

        //Set column widths
        tbl_classPriceList.getColumnModel().getColumn(2).setPreferredWidth(120);  // Class
        tbl_classPriceList.getColumnModel().getColumn(3).setPreferredWidth(100);  // Base price
        tbl_classPriceList.getColumnModel().getColumn(4).setPreferredWidth(100);  // seat capacity

        //Highlight the rows in red and make them unselectable if they have a seating capacity of zero.
//        TableWithNonSelectableRedHighlightedRowUI.markAndDisableRows(tbl_classPriceList, 4,
//                value -> {
//                    try {
//                        return Integer.parseInt(value.toString()) == 0;
//                    } catch (NumberFormatException e) {
//                        return false;
//                    }
//                }
//        );
    }

  
    private void getSelectedRow() {
        FlightBookingClassCompKey compKey = getSelectedFlightClassPriceCompIdFromTable();
        if (compKey == null) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a row.");
            return;
        }

        try {
            FlightClassPriceResponseDTO flightClassPriceDTO = flightClassPriceController.getFlightClassPriceById(compKey);
            if (flightClassPriceDTO != null) {
                
                //set request obj
                this.reservationTabInteractionDTO.setBookingClassId(flightClassPriceDTO.getBookingClass().getBookingClass_id());
                this.reservationTabInteractionDTO.setBookingClassName(flightClassPriceDTO.getBookingClass().getBookingClass_name());
                this.reservationTabInteractionDTO.setTotalPrice(flightClassPriceDTO.getBase_price());
                this.reservationTabInteractionDTO.setAvailableSeatCount(flightClassPriceDTO.getSeat_capacity());
            } else {
                CommonMessageBoxUI.showOperationFailMessageBox(this, "Flight class price not found");
            }
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    private FlightBookingClassCompKey getSelectedFlightClassPriceCompIdFromTable() {
        int selectedRow = tbl_classPriceList.getSelectedRow();

        if (selectedRow == -1) {
            return null;
        }

        Object idObj = tbl_classPriceList.getValueAt(selectedRow, 0);
        if (idObj == null || idObj.toString().isBlank()) {
            return null;
        }

        try {
            String[] parts = idObj.toString().split("-");
            if (parts.length != 2) {
                return null;
            }

            int flightId = Integer.parseInt(parts[0]);
            int bookingClassId = Integer.parseInt(parts[1]);

            return new FlightBookingClassCompKey(flightId, bookingClassId);
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private void loadAllFlightClassPricesByFlightId() {
        try {
            List<FlightClassPriceResponseDTO> classPrices = flightClassPriceController.getAllFlightClassPriceByFlightId(this.reservationTabInteractionDTO.getFlightId());
            loadFlightClassPricesIntoTable(classPrices);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }
    //-------------------||||||| End : load for table |||||| -----------------

    private void setupTableSelectionListener() {
        tbl_classPriceList.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                handleCRUDButtonsState();
            }
        });
    }

    private void handleCRUDButtonsState() {
        int selectedRow = tbl_classPriceList.getSelectedRow();
        boolean isRowSelected = (selectedRow != -1);
        setCrudButtonsVisibilityForTableSelection(isRowSelected);
    }

    private void setCrudButtonsVisibilityForTableSelection(boolean isSelected) {
        // show btn_cancel when table row is not selected
        btn_cancel.setVisible(!isSelected);

        // show btn_bookNow and btn_reset when table row is selected
        btn_bookNow.setVisible(isSelected);
        btn_reset.setVisible(isSelected);
    }

    //****** [Start : proceed] ***************
    private ReservationRequestDTO buildReservationRequestDTO(){
        return new ReservationRequestDTO(
                this.reservationTabInteractionDTO.getPassengerId(),
                this.reservationTabInteractionDTO.getFlightId(),
                this.reservationTabInteractionDTO.getBookingClassId(),
                this.reservationTabInteractionDTO.getTotalPrice(),
                this.reservationTabInteractionDTO.getBookingClassId(),
                this.reservationTabInteractionDTO.getFlightCode(),
                this.reservationTabInteractionDTO.getBookingClassName()
        );
    }
    
    private void proceedBooking() {
        if (!showBookingConfirmation()) {
            return;
        }

        if (!isInputFieldsValid()) {
            return;
        }

        try {
            ReservationRequestDTO reservationRequestDTO = buildReservationRequestDTO();
            String result = reservationController.addReservation(reservationRequestDTO);
            postOperationSuccess(result);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to save flight.");
        }
    }

    private boolean showBookingConfirmation() {
        return CommonMessageBoxUI.showOkCancelConfirmationMessageBox(
                this,
                "Are you sure you want to make a booking now?",
                "Confirmation Booking"
        );
    }
    //****** [Start : proceed] ***************

    //****** [Start : Reset] ***************
    private void clearForm() {
        resetTableSelection();
        resetSelectionState();
    }

    private void resetInputFields() {
        txt_flightInfo.setText("");
        txt_departureDateAndTime.setText("");
        txt_routeInfo.setText("");
    }

    private void resetSelectionState() {
        this.reservationTabInteractionDTO.setBookingClassId(0);
        this.reservationTabInteractionDTO.setBookingClassName(null);
        this.reservationTabInteractionDTO.setTotalPrice(null);
        this.reservationTabInteractionDTO.setAvailableSeatCount(0);
    }

    private void resetTableSelection() {
        tbl_classPriceList.clearSelection();
        setCrudButtonsVisibilityForTableSelection(false);
    }

    private void initializeUIState() {
        resetInputFields();
        initCommonLabels();
        loadSelectedFlightInfo();

        setupTableSelectionListener();
        loadAllFlightClassPricesByFlightId();
    }

    private void postOperationSuccess(String message) {
        CommonMessageBoxUI.showOperationSuccessMessageBox(this, message);
        resetUIAfterOperation();

        //clear booking request
        CommonMessageBoxUI.showBookingSuccessMessageBox(this, this.userName, this.userId, this.reservationTabInteractionDTO.getPassengerId());
        this.reservationTabInteractionDTO = new ReservationTabInteractionDTO();  
    }

    private void resetUIAfterOperation() {
        clearForm();
        initializeUIState();
    }
    //****** [End : Reset] ***************

    //****** [Start : cancelBooking] *************
    private void cancelBooking() {
        if (!showCancelConfirmation()) {
            return;
        }
        //clear booking request
        this.reservationTabInteractionDTO = new ReservationTabInteractionDTO();

        //navigate to userDashboard
        CommonTask.switchView(this, new UserDashboardView(this.userName, this.userId));
    }

    private boolean showCancelConfirmation() {
        return CommonMessageBoxUI.showOkCancelConfirmationMessageBox(
                this,
                "Are you sure you want to cancel this booking?  This action cannot be undone",
                "Confirm Cancellation"
        );
    }
    //****** [End : cancelBooking] ***************
    //--------------------- [ End - btn handle] --------------------------------d    
}
