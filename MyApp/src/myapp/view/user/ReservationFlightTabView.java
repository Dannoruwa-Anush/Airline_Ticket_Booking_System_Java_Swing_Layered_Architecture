/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myapp.view.user;

import java.awt.Cursor;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JComboBox;
import myapp.controller.FlightController;
import myapp.controller.PassengerProfileController;
import myapp.controller.RouteController;
import myapp.dto.flight.FlightResponseDTO;
import myapp.dto.reservation.ReservationTabInteractionDTO;
import myapp.dto.route.RouteResponseDTO;
import myapp.util.audit.AuditUtil;
import myapp.util.commonTask.CommonTask;
import myapp.util.commonUI.CommonMessageBoxUI;
import myapp.util.commonUI.DateTimePickerUI;
import myapp.util.commonUI.PaginatedTableUI;
import myapp.util.formValidation.FormValidationUtil;
import myapp.view.LoginView;

/**
 *
 * @author HP
 */
public class ReservationFlightTabView extends javax.swing.JFrame {

    /**
     * Creates new form UserDashboardView
     */
    
    private final String userName;
    private ReservationTabInteractionDTO reservationTabInteractionDTO;
    private final int userId;
    private PaginatedTableUI<FlightResponseDTO> paginatedUI;
    
    private final RouteController routeController;
    private Map<String, RouteResponseDTO> routeMap; // Map to store route_name -> RouteResponseDTO
    private int selectedRoute_Id;

    private final FlightController flightController;
    private final PassengerProfileController passengerProfileController;

    public ReservationFlightTabView(String userName, int userId, ReservationTabInteractionDTO reservationTabInteractionDTO) {
        initComponents();
        this.userName = userName;
        this.reservationTabInteractionDTO = reservationTabInteractionDTO;
        this.userId = userId;

        routeMap = new HashMap<>();
        
        routeController = new RouteController();
        flightController = new FlightController();
        passengerProfileController = new PassengerProfileController();

        clearForm();
        initializeUIState();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_tblPagList_prev = new javax.swing.JButton();
        btn_tblPagList_next = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();
        lbl_logout = new javax.swing.JLabel();
        lbl_loggedUser = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        lblId6 = new javax.swing.JLabel();
        txt_flight_DepartureDateTime = new javax.swing.JTextField();
        btn_DepartureDateTime = new javax.swing.JButton();
        lblId5 = new javax.swing.JLabel();
        comBox_route = new javax.swing.JComboBox<>();
        btn_proceed = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_flightList = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        lbl_copyright = new javax.swing.JLabel();
        btn_search = new javax.swing.JButton();
        btn_reset = new javax.swing.JButton();
        btn_tblPagList_prev1 = new javax.swing.JButton();
        btn_tblPagList_next1 = new javax.swing.JButton();

        btn_tblPagList_prev.setText("<");
        btn_tblPagList_prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_prevActionPerformed(evt);
            }
        });

        btn_tblPagList_next.setText(">");
        btn_tblPagList_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_nextActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btn_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myapp/resource/img/back-arrow.jpg"))); // NOI18N
        btn_back.setBorder(null);
        btn_back.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_back.setMaximumSize(new java.awt.Dimension(39, 16));
        btn_back.setMinimumSize(new java.awt.Dimension(39, 16));
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        lblTitle1.setBackground(new java.awt.Color(204, 204, 204));
        lblTitle1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("Ticket Booking");

        lbl_logout.setForeground(new java.awt.Color(0, 51, 255));
        lbl_logout.setText("(logout)");
        lbl_logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_logoutMouseClicked(evt);
            }
        });

        lbl_loggedUser.setForeground(new java.awt.Color(0, 51, 255));
        lbl_loggedUser.setText("(username)");

        lblId6.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId6.setText("Departure Date & Time :");

        btn_DepartureDateTime.setText("...");
        btn_DepartureDateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DepartureDateTimeActionPerformed(evt);
            }
        });

        lblId5.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId5.setText("From - To :");

        comBox_route.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comBox_route.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comBox_routeActionPerformed(evt);
            }
        });

        btn_proceed.setText("Proceed");
        btn_proceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_proceedActionPerformed(evt);
            }
        });

        tbl_flightList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_flightList.setFillsViewportHeight(true);
        tbl_flightList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_flightListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_flightList);

        jLabel2.setText("Airline Ticket Booking System");

        lbl_copyright.setText("@C");

        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        btn_reset.setText("Reset");
        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });

        btn_tblPagList_prev1.setText("<");
        btn_tblPagList_prev1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_prev1ActionPerformed(evt);
            }
        });

        btn_tblPagList_next1.setText(">");
        btn_tblPagList_next1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_next1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbl_copyright)))
                .addGap(231, 231, 231))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_search)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_reset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_proceed))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addComponent(lblId5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(comBox_route, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(40, 40, 40)
                            .addComponent(lblId6)
                            .addGap(12, 12, 12)
                            .addComponent(txt_flight_DepartureDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn_DepartureDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(28, 28, 28)
                            .addComponent(lbl_logout)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_loggedUser)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btn_tblPagList_prev1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn_tblPagList_next1))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_logout)
                    .addComponent(lbl_loggedUser))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblId5)
                    .addComponent(txt_flight_DepartureDateTime)
                    .addComponent(lblId6)
                    .addComponent(comBox_route)
                    .addComponent(btn_DepartureDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_search)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_tblPagList_prev1)
                    .addComponent(btn_tblPagList_next1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_proceed)
                    .addComponent(btn_reset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_copyright)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        CommonTask.switchView(this, new UserDashboardView(this.userName, this.userId));
    }//GEN-LAST:event_btn_backActionPerformed

    private void lbl_logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_logoutMouseClicked
        CommonTask.switchView(this, new LoginView());
    }//GEN-LAST:event_lbl_logoutMouseClicked

    private void comBox_routeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comBox_routeActionPerformed
        String selectedRouteInfo = (String) comBox_route.getSelectedItem();
        if (selectedRouteInfo != null) {
            RouteResponseDTO selectedRoute = routeMap.get(selectedRouteInfo);

            if (selectedRoute != null) {
                selectedRoute_Id = selectedRoute.getRoute_id(); // Store selected selectedRoute ID
            }
        }
    }//GEN-LAST:event_comBox_routeActionPerformed

    private void tbl_flightListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_flightListMouseClicked
        getSelectedRow();
    }//GEN-LAST:event_tbl_flightListMouseClicked

    private void btn_proceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_proceedActionPerformed
       proceedBooking();
    }//GEN-LAST:event_btn_proceedActionPerformed

    private void btn_DepartureDateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DepartureDateTimeActionPerformed
        LocalDateTime selectedDateTime = DateTimePickerUI.showDateTimePickerDialog("Select Departure Date & Time");
        if (selectedDateTime != null) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
            txt_flight_DepartureDateTime.setText(selectedDateTime.format(formatter));
        }
    }//GEN-LAST:event_btn_DepartureDateTimeActionPerformed

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        handleAllFlightsLoad();
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed
        resetUIAfterOperation();
    }//GEN-LAST:event_btn_resetActionPerformed

    private void btn_tblPagList_prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_prevActionPerformed
        if (paginatedUI != null) {
            paginatedUI.previousPage();
        }
    }//GEN-LAST:event_btn_tblPagList_prevActionPerformed

    private void btn_tblPagList_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_nextActionPerformed
        if (paginatedUI != null) {
            paginatedUI.nextPage();
        }
    }//GEN-LAST:event_btn_tblPagList_nextActionPerformed

    private void btn_tblPagList_prev1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_prev1ActionPerformed
        if (paginatedUI != null) {
            paginatedUI.previousPage();
        }
    }//GEN-LAST:event_btn_tblPagList_prev1ActionPerformed

    private void btn_tblPagList_next1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_next1ActionPerformed
        if (paginatedUI != null) {
            paginatedUI.nextPage();
        }
    }//GEN-LAST:event_btn_tblPagList_next1ActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(UserDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(UserDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(UserDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(UserDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new UserDashboardView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_DepartureDateTime;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_proceed;
    private javax.swing.JButton btn_reset;
    private javax.swing.JButton btn_search;
    private javax.swing.JButton btn_tblPagList_next;
    private javax.swing.JButton btn_tblPagList_next1;
    private javax.swing.JButton btn_tblPagList_prev;
    private javax.swing.JButton btn_tblPagList_prev1;
    private javax.swing.JComboBox<String> comBox_route;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblId5;
    private javax.swing.JLabel lblId6;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lbl_copyright;
    private javax.swing.JLabel lbl_loggedUser;
    private javax.swing.JLabel lbl_logout;
    private javax.swing.JTable tbl_flightList;
    private javax.swing.JTextField txt_flight_DepartureDateTime;
    // End of variables declaration//GEN-END:variables

    //--------------------- [ Start - btn handle] ------------------------------
    private void initCommonLabels() {
        lbl_loggedUser.setText("( " + this.userName + " )");
        lbl_logout.setText("<html><u>(Logout)</u></html>");
        lbl_logout.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        lbl_copyright.setText("@Dannoruwa-Anush 2025");
    }
    //-------------------||||||| Start : input field validation |||||||---------
    private boolean isInputFieldsValid() {
        return isBookingPreConditionsValid() && isBookingPostConditionsValid();
    }

    private boolean isBookingPreConditionsValid() {
        if (!FormValidationUtil.isIdSelectionValid(this.reservationTabInteractionDTO.getPassengerId())) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Passenger info is not valid");
            return false;
        }
        return true;
    }
    
    private boolean isBookingPostConditionsValid() {
        return isFlightSelectionValid() && isFlightCodeSettingValid();
    }
    
    private boolean isFlightSelectionValid() {
        if (!FormValidationUtil.isIdSelectionValid(this.reservationTabInteractionDTO.getFlightId())) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a flight");
            return false;
        }
        return true;
    }
    
    private boolean isFlightCodeSettingValid() {
        if (!FormValidationUtil.isValidTxtField(this.reservationTabInteractionDTO.getFlightCode())) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Flight code is not setted properly");
            return false;
        }
        return true;
    }
    //-------------------||||||| End : input field validation |||||||-----------

    //-------------------||||||| Start : load for comBox |||||| ----------------
    private void loadAllRoutes() {
        try {
            List<RouteResponseDTO> routes = routeController.getAllRoutes();
            loadRoutesIntoComboBoxes(routes);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    private void loadRoutesIntoComboBoxes(List<RouteResponseDTO> routes) {
        for (RouteResponseDTO route : routes) {
            comBox_route.addItem(route.getRouteInfo()); // Add only the route info
            routeMap.put(route.getRouteInfo(), route); // Store the full object in the map
        }
    }

    //Note : Object... args is a varargs(Variable Arguments) parameter
    private void setComboBoxesHeaders(boolean isUpdate, Object... args) {
        comBox_route.removeAllItems();

        if (isUpdate) {
            // Check if args is not empty and contains expected types
            if (args.length >= 1 && args[0] instanceof String) {
                String routeInfo = (String) args[0];

                comBox_route.addItem(routeInfo);
            } else {
                // Handle error or invalid input scenario
                System.out.println("Invalid arguments passed for combox header names.");
            }
        } else {
            comBox_route.addItem("Select");
        }
    }
    //-------------------||||||| End : load for comBox |||||| ------------------ 

    //-------------------||||||| Start : load for table |||||| -----------------
    private void loadFlightsIntoTable(List<FlightResponseDTO> flights) {
        String[] columns = {"flight_Id", "No", "Code", "Route Info", "Departure Time", "Airline"};

        paginatedUI = new PaginatedTableUI<>(
                tbl_flightList,
                columns,
                
                // pass a function (lambda) | This function will take single 'ObjResponseDTO' object into a String array
                flight -> new String[]{
                    String.valueOf(flight.getFlight_id()),
                    String.valueOf(flights.indexOf(flight) + 1),
                    flight.getFlight_code(),
                    flight.getRoute().getRouteInfo(),
                    String.valueOf(flight.getFlight_departure_time()),
                    flight.getFlight_airline_name()
                },
                10 //page size
        );

        paginatedUI.setData(flights);

        // Set widths for visible columns
        tbl_flightList.getColumnModel().getColumn(2).setPreferredWidth(60);   // Code
        tbl_flightList.getColumnModel().getColumn(3).setPreferredWidth(200);  // Route Info
        tbl_flightList.getColumnModel().getColumn(4).setPreferredWidth(120);  // Arrival Time
        tbl_flightList.getColumnModel().getColumn(5).setPreferredWidth(100);  // Airline
    }

    private void getSelectedRow() {
        Integer id = getSelectedFlightIdFromTable();
        if (id == null) {
            return;
        }

        try {
            FlightResponseDTO flightDTO = flightController.getFlightById(id);
            if (flightDTO != null) {
                //set input fields
                txt_flight_DepartureDateTime.setText(fromLocalTimeToStringConversion(flightDTO.getFlight_departure_time()));
                selectedRoute_Id = flightDTO.getRoute().getRoute_id();

                //set request obj
                this.reservationTabInteractionDTO.setFlightId(flightDTO.getFlight_id());
                this.reservationTabInteractionDTO.setFlightCode(flightDTO.getFlight_code());
                
                setComboBoxesHeaders(true, flightDTO.getRoute().getRouteInfo());
                loadAllRoutes();
            } else {
                CommonMessageBoxUI.showOperationFailMessageBox(this, "Flight not found");
            }
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    private Integer getSelectedFlightIdFromTable() {
        int selectedRow = tbl_flightList.getSelectedRow();

        if (selectedRow == -1) {
            return null;
        }

        Object idObj = tbl_flightList.getValueAt(selectedRow, 0);
        if (idObj == null || idObj.toString().isBlank()) {
            return null;
        }

        try {
            return Integer.valueOf(idObj.toString());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private void handleAllFlightsLoad() {
        String departureTime = txt_flight_DepartureDateTime.getText().trim();

        if (selectedRoute_Id <= 0 || departureTime.isEmpty()) {
            loadAllFlights();
        } else {
            loadAllFlightsForRouteAndDepartureTime();
        }
    }

    private void loadAllFlights() {
        try {
            List<FlightResponseDTO> flights = flightController.getAllFlightsWithFlightClassPriceInfo();
            loadFlightsIntoTable(flights);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    private void loadAllFlightsForRouteAndDepartureTime() {
        try {
            LocalDateTime selectedDepartureTime = fromStringToLocalTimeConversion(txt_flight_DepartureDateTime.getText().trim());
            List<FlightResponseDTO> flights = flightController.getAllFlightsForRouteAndDepartureTimeWithFlightClassPriceInfo(selectedRoute_Id, selectedDepartureTime);
            System.out.println(flights);
            loadFlightsIntoTable(flights);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
        }
    }

    // Helper method for String To LocalTime conversion
    private LocalDateTime fromStringToLocalTimeConversion(String dateTimeStr) throws DateTimeParseException {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        return LocalDateTime.parse(dateTimeStr.trim(), formatter);
    }

    // Helper method for LocalTime To String conversion
    private String fromLocalTimeToStringConversion(LocalDateTime dateTime) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        return dateTime.format(formatter);
    }
    //-------------------||||||| End : load for table |||||| -----------------

    //**********************************
    private void setupTableSelectionListener() {
        tbl_flightList.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                handleCRUDButtonsState();
            }
        });
    }

    private void handleCRUDButtonsState() {
        int selectedRow = tbl_flightList.getSelectedRow();
        boolean isRowSelected = (selectedRow != -1);
        setCrudButtonsVisibilityForTableSelection(isRowSelected);
    }

    private void setCrudButtonsVisibilityForTableSelection(boolean isSelected) {
        // show btn_proceed and btn_reset when table row is selected
        btn_proceed.setVisible(isSelected); 
        btn_reset.setVisible(isSelected);
    }
    
    //****** [Start : proceed] ***************
    private void proceedBooking() {
        if (!showProceedConfirmation()) {
            return;
        }

        
        if (!isInputFieldsValid()) {
            return;
        }
        
        CommonTask.switchView(this, new ReservationFlightClassPriceTabView(this.userName, this.userId, this.reservationTabInteractionDTO));
    }
    
    private boolean showProceedConfirmation() {
        return CommonMessageBoxUI.showOkCancelConfirmationMessageBox(
                this,
                "Are you sure you would like to continue with the booking process?",
                "Confirm Process"
        );
    }
    //****** [Start : proceed] ***************
    
    //****** [Start : Reset] ***************
    private void clearForm() {
        resetInputFields();
        resetSelectionState();
        resetComboBoxes();
        resetTableSelection();
    }

    private void resetInputFields() {
        txt_flight_DepartureDateTime.setText("");
    }

    private void resetSelectionState() {
        selectedRoute_Id = -1;
    }

    private void resetComboBoxes() {
        resetComboBox(comBox_route);
    }

    private void resetComboBox(JComboBox<String> comboBox) {
        comboBox.removeAllItems();
        comboBox.addItem("Select");
    }

    private void resetTableSelection() {
        tbl_flightList.clearSelection();
        setCrudButtonsVisibilityForTableSelection(false);
    }

    private void initializeUIState() {
        initCommonLabels();
        setupTableSelectionListener();

        setComboBoxesHeaders(false);
        loadAllRoutes();
        
        handleAllFlightsLoad();
    }
    
    private void resetUIAfterOperation() {
        clearForm();
        initializeUIState();
    }
    //****** [End : Reset] ***************
    //--------------------- [ End - btn handle] --------------------------------
}
