/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myapp.view.user;

import java.awt.Cursor;
import java.util.List;
import myapp.controller.ReservationController;
import myapp.dto.reservation.ReservationResponseDTO;
import myapp.dto.reservation.ReservationStatusChangeRequestDTO;
import myapp.util.audit.AuditUtil;
import myapp.util.commonTask.CommonTask;
import myapp.util.commonUI.CommonMessageBoxUI;
import myapp.util.commonUI.TableWithNonSelectableRedHighlightedRowUI;
import myapp.util.commonUI.PaginatedTableUI;
import myapp.util.enums.BookingStatusEnum;
import myapp.view.LoginView;

/**
 *
 * @author HP
 */
public class ReservationUserView extends javax.swing.JFrame {

    /**
     * Creates new form BookingView
     */
    private final ReservationController reservationController;
    private final String userName;
    private final int userId;
    private final int passengerId;
    private PaginatedTableUI<ReservationResponseDTO> paginatedUI;

    public ReservationUserView(String userName, int userId, int passengerId) {
        initComponents();

        this.userName = userName;
        this.userId = userId;
        this.passengerId = passengerId;

        reservationController = new ReservationController();

        initializeUIState();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_tblPagList_next = new javax.swing.JButton();
        btn_tblPagList_prev = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        lbl_copyright = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_reservationByPassengerList = new javax.swing.JTable();
        txt_searchBar = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        btn_cancelReservation = new javax.swing.JButton();
        txt_reservationInfo = new javax.swing.JTextField();
        lblId1 = new javax.swing.JLabel();
        lbl_logout = new javax.swing.JLabel();
        btn_back2 = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();
        lbl_loggedUser = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        btn_tblPagList_next1 = new javax.swing.JButton();
        btn_tblPagList_prev1 = new javax.swing.JButton();
        btn_reset = new javax.swing.JButton();

        btn_tblPagList_next.setText(">");
        btn_tblPagList_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_nextActionPerformed(evt);
            }
        });

        btn_tblPagList_prev.setText("<");
        btn_tblPagList_prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_prevActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel2.setText("Airline Ticket Booking System");

        lbl_copyright.setText("@C");

        tbl_reservationByPassengerList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_reservationByPassengerList.setFillsViewportHeight(true);
        tbl_reservationByPassengerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_reservationByPassengerListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_reservationByPassengerList);

        txt_searchBar.setText("Search here...");
        txt_searchBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_searchBarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_searchBarFocusLost(evt);
            }
        });
        txt_searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_searchBarKeyTyped(evt);
            }
        });

        btn_cancelReservation.setText("Cancel Reservation");
        btn_cancelReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelReservationActionPerformed(evt);
            }
        });

        lblId1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblId1.setText("Reservation Info :");

        lbl_logout.setForeground(new java.awt.Color(0, 51, 255));
        lbl_logout.setText("(logout)");
        lbl_logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_logoutMouseClicked(evt);
            }
        });

        btn_back2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myapp/resource/img/back-arrow.jpg"))); // NOI18N
        btn_back2.setBorder(null);
        btn_back2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_back2.setMaximumSize(new java.awt.Dimension(39, 16));
        btn_back2.setMinimumSize(new java.awt.Dimension(39, 16));
        btn_back2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_back2ActionPerformed(evt);
            }
        });

        lblTitle1.setBackground(new java.awt.Color(204, 204, 204));
        lblTitle1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("Reservation");

        lbl_loggedUser.setForeground(new java.awt.Color(0, 51, 255));
        lbl_loggedUser.setText("(username)");

        btn_tblPagList_next1.setText(">");
        btn_tblPagList_next1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_next1ActionPerformed(evt);
            }
        });

        btn_tblPagList_prev1.setText("<");
        btn_tblPagList_prev1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tblPagList_prev1ActionPerformed(evt);
            }
        });

        btn_reset.setText("Reset");
        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btn_back2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 50, Short.MAX_VALUE))
            .addComponent(jSeparator2)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_logout)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbl_loggedUser)
                                .addGap(25, 25, 25))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblId1)
                                .addGap(35, 35, 35)
                                .addComponent(txt_reservationInfo))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_reset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_cancelReservation)))
                .addGap(29, 29, 29))
            .addComponent(jSeparator1)
            .addComponent(jSeparator3)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lbl_copyright))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_tblPagList_prev1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_tblPagList_next1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(txt_searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_back2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_loggedUser)
                    .addComponent(lbl_logout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId1)
                    .addComponent(txt_reservationInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_cancelReservation)
                    .addComponent(btn_reset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_tblPagList_prev1)
                    .addComponent(btn_tblPagList_next1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_copyright)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbl_reservationByPassengerListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_reservationByPassengerListMouseClicked
        getSelectedRow();
    }//GEN-LAST:event_tbl_reservationByPassengerListMouseClicked

    private void txt_searchBarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchBarFocusGained
        if (txt_searchBar.getText().equals("Search here ...")) {
            txt_searchBar.setText("");  // Clear the placeholder text when the user clicks on the field
        }
    }//GEN-LAST:event_txt_searchBarFocusGained

    private void txt_searchBarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchBarFocusLost
        if (txt_searchBar.getText().isEmpty()) {
            txt_searchBar.setText("Search here ...");  // Restore placeholder text if the user left the field empty
        }
    }//GEN-LAST:event_txt_searchBarFocusLost

    private void txt_searchBarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchBarKeyTyped
        handleSearch();
    }//GEN-LAST:event_txt_searchBarKeyTyped

    private void btn_cancelReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelReservationActionPerformed
        cancelReservation();
    }//GEN-LAST:event_btn_cancelReservationActionPerformed

    private void lbl_logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_logoutMouseClicked
        CommonTask.switchView(this, new LoginView());
    }//GEN-LAST:event_lbl_logoutMouseClicked

    private void btn_back2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_back2ActionPerformed
        CommonTask.switchView(this, new UserDashboardView(this.userName, this.userId));
    }//GEN-LAST:event_btn_back2ActionPerformed

    private void btn_tblPagList_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_nextActionPerformed
        if (paginatedUI != null) {
            paginatedUI.nextPage();
        }
    }//GEN-LAST:event_btn_tblPagList_nextActionPerformed

    private void btn_tblPagList_prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_prevActionPerformed
        if (paginatedUI != null) {
            paginatedUI.previousPage();
        }
    }//GEN-LAST:event_btn_tblPagList_prevActionPerformed

    private void btn_tblPagList_next1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_next1ActionPerformed
        if (paginatedUI != null) {
            paginatedUI.nextPage();
        }
    }//GEN-LAST:event_btn_tblPagList_next1ActionPerformed

    private void btn_tblPagList_prev1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tblPagList_prev1ActionPerformed
        if (paginatedUI != null) {
            paginatedUI.previousPage();
        }
    }//GEN-LAST:event_btn_tblPagList_prev1ActionPerformed

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed
        resetUIAfterOperation();
    }//GEN-LAST:event_btn_resetActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(BookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(BookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(BookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(BookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new BookingView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_back2;
    private javax.swing.JButton btn_cancelReservation;
    private javax.swing.JButton btn_reset;
    private javax.swing.JButton btn_tblPagList_next;
    private javax.swing.JButton btn_tblPagList_next1;
    private javax.swing.JButton btn_tblPagList_prev;
    private javax.swing.JButton btn_tblPagList_prev1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblId1;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lbl_copyright;
    private javax.swing.JLabel lbl_loggedUser;
    private javax.swing.JLabel lbl_logout;
    private javax.swing.JTable tbl_reservationByPassengerList;
    private javax.swing.JTextField txt_reservationInfo;
    private javax.swing.JTextField txt_searchBar;
    // End of variables declaration//GEN-END:variables

    //------------ [ Start - btn handle] -------------
    private void initCommonLabels() {
        lbl_loggedUser.setText("( " + this.userName + " )");
        lbl_logout.setText("<html><u>(Logout)</u></html>");
        lbl_logout.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        lbl_copyright.setText("@Dannoruwa-Anush 2025");
    }

    //-------------------||||||| Start : load for table |||||| -----------------
    private void getSelectedRow() {

        Integer id = getSelectedReservationIdFromTable();
        if (id == null) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a valid reservation.");
            return;
        }
        try {
            ReservationResponseDTO reservationDTO = reservationController.getReservationById(id);
            if (reservationDTO != null) {
                txt_reservationInfo.setText(reservationDTO.getReservationInfo());
            } else {
                CommonMessageBoxUI.showOperationFailMessageBox(this, "Reservation not found.");
            }
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Error loading reservation.");
        }
    }

    private Integer getSelectedReservationIdFromTable() {
        int selectedRow = tbl_reservationByPassengerList.getSelectedRow();
        if (selectedRow == -1) {
            return null;
        }

        Object idObj = tbl_reservationByPassengerList.getValueAt(selectedRow, 0);
        if (idObj == null || idObj.toString().isBlank()) {
            return null;
        }

        try {
            return Integer.valueOf(idObj.toString());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private void loadReservationsForPassengerIntoTable(List<ReservationResponseDTO> reservations) {
        String[] columns = {"reservation_Id", "No", "reservation_info", "Status"};

        paginatedUI = new PaginatedTableUI<>(
                tbl_reservationByPassengerList,
                columns,
                // pass a function (lambda) | This function will take single 'ObjResponseDTO' object into a String array
                reservation -> new String[]{
                    String.valueOf(reservation.getReservation_id()),
                    String.valueOf(reservations.indexOf(reservation) + 1),
                    String.valueOf(reservation.getReservationInfo()),
                    String.valueOf(reservation.getReservation_status()),},
                10 //page size
        );

        paginatedUI.setData(reservations);
        
        //Highlight the rows in red and make them unselectable if they have a status of "cancel."
        TableWithNonSelectableRedHighlightedRowUI.markAndDisableRows(tbl_reservationByPassengerList, 3,
                value -> value != null && value.toString().equalsIgnoreCase(BookingStatusEnum.CANCELLED.getBookingStatus()
                )
        );
    }

    private void loadAllReservationsForPassenger() {
        try {
            List<ReservationResponseDTO> reservationsForPassenger = reservationController.getAllReservationByPassengerProfileId(this.passengerId);
            loadReservationsForPassengerIntoTable(reservationsForPassenger);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to load reservations.");
        }
    }

    private void loadAllSearchKeyMatchReservationsForPassenger(String searchKey) {
        try {
            List<ReservationResponseDTO> reservationsForPassenger = reservationController.getAllReservationBySearchKeyAndPassengerProfileId(this.passengerId, searchKey);
            loadReservationsForPassengerIntoTable(reservationsForPassenger);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to load reservations.");
        }
    }

    private void handleSearch() {
        String searchKey = txt_searchBar.getText().trim();
        if (!searchKey.isEmpty()) {
            loadAllSearchKeyMatchReservationsForPassenger(searchKey);
        } else {
            loadAllReservationsForPassenger();
        }
    }
    //-------------------||||||| End : load for table |||||| -------------------

    private void setupTableSelectionListener() {
        tbl_reservationByPassengerList.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                handleCRUDButtonsState();
            }
        });
    }

    private void handleCRUDButtonsState() {
        int selectedRow = tbl_reservationByPassengerList.getSelectedRow();
        boolean isRowSelected = (selectedRow != -1);
        setCrudButtonsVisibilityForTableSelection(isRowSelected);
    }

    private void setCrudButtonsVisibilityForTableSelection(boolean isSelected) {
        btn_cancelReservation.setVisible(isSelected);
        btn_reset.setVisible(isSelected);
    }

    //****** [Start : cancel] ***************
    private void cancelReservation() {
        if (!showCancelReservationConfirmation()) {
            return;
        }

        Integer id = getSelectedReservationIdFromTable();
        if (id == null) {
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Please select a reservation to cancel.");
            return;
        }

        try {
            performCancelReservation(id);
        } catch (Exception ex) {
            AuditUtil.logException(this.getClass(), ex);
            CommonMessageBoxUI.showOperationFailMessageBox(this, "Failed to cancel reservation.");
        }
    }

    private boolean showCancelReservationConfirmation() {
        return CommonMessageBoxUI.showOkCancelConfirmationMessageBox(
                this,
                "Are you sure you want to cancel this reservation?",
                "Confirm Update"
        );
    }

    private void performCancelReservation(Integer id) throws Exception {
        ReservationStatusChangeRequestDTO cancelRequest = new ReservationStatusChangeRequestDTO(BookingStatusEnum.CANCELLED.getBookingStatus());
        String result = reservationController.updateReservationStatus(id, cancelRequest);
        postOperationSuccess(result);
    }
    //****** [End : cancel] ***************

    //****** [Start : Reset] ***************
    private void clearForm() {
        resetInputFields();
        resetTableSelection();
    }

    private void resetInputFields() {
        txt_reservationInfo.setText("");
    }

    private void resetTableSelection() {
        tbl_reservationByPassengerList.clearSelection();
        setCrudButtonsVisibilityForTableSelection(false);
    }

    private void initializeUIState() {
        initCommonLabels();

        setupTableSelectionListener();
        loadAllReservationsForPassenger();
    }

    private void postOperationSuccess(String message) {
        CommonMessageBoxUI.showOperationSuccessMessageBox(this, message);
        resetUIAfterOperation();
    }

    private void resetUIAfterOperation() {
        clearForm();
        initializeUIState();
    }
    //****** [End : Reset] ***************
    //-------------[ End - btn hande] ----------------
}
